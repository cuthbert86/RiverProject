[
    {
        "id": "73393adb9ca26544",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "38240a5a23fafee4",
        "type": "tab",
        "label": "maindashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a3fa2a99e772c545",
        "type": "tab",
        "label": "Flow 3",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "7e9da581.12d884",
        "type": "tab",
        "label": "template-flow-video2",
        "disabled": true,
        "info": ""
    },
    {
        "id": "eae036f7ed9aa487",
        "type": "tab",
        "label": "Flow 4",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "d49472cb.6086a",
        "type": "tab",
        "label": "python virtual environment",
        "disabled": true,
        "info": ""
    },
    {
        "id": "bc27ebb3355b6132",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d8033d206022253c",
        "type": "tab",
        "label": "Flow 5",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a29cf0664c167293",
        "type": "tab",
        "label": "Template Tests",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "49227412639e3b24",
        "type": "group",
        "z": "73393adb9ca26544",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [],
        "x": 34,
        "y": 359,
        "w": 40,
        "h": 40
    },
    {
        "id": "a403ed1d19aa681d",
        "type": "group",
        "z": "eae036f7ed9aa487",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "58b1060ccba4563d",
            "0c64c551e04b70ad",
            "724b4f8504180178",
            "af571938d7bc90e2",
            "527c352cbefac2e2",
            "272650ac5bdff7a0",
            "4c5f1fe320288ce7",
            "053d71f7204a0797",
            "944ef9118aa18067",
            "6c86c15ff262fe09",
            "8b5ccf61c7c33d5c",
            "ff79c92aea6b93cc",
            "ac04e21c5ba33ad9",
            "88c8e7e61e93bdd3",
            "61d2dbf5bb5791ab",
            "7831a709cb207f34",
            "213da20396a2a4fc",
            "cc25b08a74335185",
            "943c2e2459deb68d",
            "a8995b1b0a4e5c99",
            "b0ce3003d94845b2",
            "89c823d57c756feb",
            "b9e03a8b38f10bb0",
            "a538b960c1851a6c",
            "3da97c4d29f165dc",
            "d016d2ce5ff8e40e",
            "7e6916e216c8da81",
            "dcb4c622b7d87222"
        ],
        "x": -6,
        "y": -1,
        "w": 1252,
        "h": 462
    },
    {
        "id": "fc8f1db4547ef664",
        "type": "group",
        "z": "a29cf0664c167293",
        "name": "Vue v3 IIFE client, no build - Check description in each node \\n ",
        "style": {
            "label": true,
            "fill": "#ffffff",
            "fill-opacity": "0.26",
            "color": "#000000"
        },
        "nodes": [
            "c3bd76ce441dc3e3",
            "3439dbee433a88a8",
            "909a45a07adf4caf",
            "6c14431f469b8846",
            "e47195b8eda5d40e",
            "0c9f24ab06ee0405",
            "89ae80c659089985",
            "caf50be69279b624",
            "92f0587559df7590",
            "d48166077d1f76af",
            "3e569dd871349f93",
            "dd004a6a442ee6a8",
            "ce9a12ba5070f920",
            "c969ddb33e099a82"
        ],
        "x": 34,
        "y": 1843,
        "w": 722,
        "h": 258
    },
    {
        "id": "d7ec253e417f16b6",
        "type": "group",
        "z": "a29cf0664c167293",
        "name": "uibuilder IIFE client build with Vue v2 and bootstrap-vue (Full example) \\n ",
        "style": {
            "label": true,
            "fill": "#ffffff",
            "fill-opacity": "0.27",
            "color": "#000000"
        },
        "nodes": [
            "284121dd33dcd50b",
            "4b0be73d7c1879b9",
            "6f8e51db50f117dd",
            "d7ce360f9e714a57",
            "d32229867aa7e3c6",
            "688f3cc99964f88d",
            "802bd5f9321628ad",
            "955997a9e7fb3c28",
            "a0976141d22bd12f",
            "9a7af1b5ee3353ba",
            "7ee9528a1b19eb12",
            "81bf7609272ef9af",
            "c1d0beb7a8dcf573",
            "1b6a3d16ed9f9995",
            "5d26dd3c341a40b3"
        ],
        "x": 34,
        "y": 1563,
        "w": 732,
        "h": 258
    },
    {
        "id": "1f80e4a191d5322a",
        "type": "group",
        "z": "a29cf0664c167293",
        "name": "uibuilder IIFE client build with Vue v2 and bootstrap-vue (Minimal Example) \\n ",
        "style": {
            "label": true,
            "fill": "#ffffff",
            "fill-opacity": "0.27",
            "color": "#000000"
        },
        "nodes": [
            "251344c859a9f066",
            "9df22ce79ef39e07",
            "5028e29f49a5591f",
            "2a3a787b6520cef9",
            "5e40aeef2599e4e1",
            "d8c57c9cbfba6417",
            "5f2a84a134a770d7",
            "c90fa14f3bcd1b5a",
            "04b7fe83187b26ed",
            "c8177e230bf224db",
            "079a6828b01e3ca4",
            "168b498f7d93b9ca",
            "35591e8d08b9a8dc",
            "949ddd795829e86e",
            "2a6997fca56f2de1"
        ],
        "x": 774,
        "y": 1563,
        "w": 732,
        "h": 258
    },
    {
        "id": "946ef719ea12bc08",
        "type": "group",
        "z": "a29cf0664c167293",
        "name": "Vue v3 ESM, no build - Check description in each node - Can load components without a build step on modern browsers\\n ",
        "style": {
            "label": true,
            "fill": "#ffffff",
            "fill-opacity": "0.26",
            "color": "#000000"
        },
        "nodes": [
            "6eba307faa3c48e2",
            "3ff7fd7992d48c25",
            "f8f90bfd46b1f53e",
            "e340bdc745361401",
            "fb79d887323f47c1",
            "169c10878b6640e4",
            "97f0c2ea900e3055",
            "8db08ddd2a866fb5",
            "d66f87eca883848e",
            "619d338c7eba7669",
            "7ce2b59950e22ecb",
            "b9a054a3ff5f393d",
            "29bf34be48a50467",
            "31310a6648a194ce"
        ],
        "x": 774,
        "y": 1843,
        "w": 753,
        "h": 258
    },
    {
        "id": "d14e5cf8cd61d8f5",
        "type": "group",
        "z": "a29cf0664c167293",
        "name": "A vanilla, blank template. Ready for anything. \\n ",
        "style": {
            "label": true,
            "fill": "#ffffbf",
            "fill-opacity": "0.33",
            "color": "#000000"
        },
        "nodes": [
            "01f14b086d7f8a11",
            "877b43edd7251acc",
            "17fde0242e191689",
            "7eee677cb9a62723",
            "d0621a8f51f507bb",
            "f012975f0375b6c8",
            "cb80cc034da2d8f1",
            "736993a690bbc167",
            "0df7b796d44d2e71",
            "d121c8e3e56c4747",
            "9eb1553c08864316",
            "0368db6d7d446339",
            "f12f44c1b6da7192",
            "41fd7d11ae3c157d",
            "5ac8daccaea4a291",
            "89bf36d6fc8d1d41",
            "e4f674b5eb32aa05",
            "7011f3686a81d7eb",
            "c0abb8e9c5a1262c",
            "9cf758cd9a3eda81",
            "3c2b5cb8448dbb64"
        ],
        "x": 24,
        "y": 83,
        "w": 692,
        "h": 302
    },
    {
        "id": "31c2d342f75d0ef8",
        "type": "group",
        "z": "a29cf0664c167293",
        "name": "Extended version of the \"blank\" template showing some additional features. \\n ",
        "style": {
            "label": true,
            "fill": "#ffffbf",
            "fill-opacity": "0.31",
            "color": "#000000"
        },
        "nodes": [
            "d0b6170b92cd6064",
            "9a4f424c76119444",
            "2cb6722e802cf5f1",
            "5003addd448138c2",
            "ba221f812ae3d84c",
            "4020b64008bfdad5",
            "be06a0df26c00462",
            "f95e69f67072596b",
            "5d1231ce8247b08a",
            "1b7e4c189916dbec",
            "05cb4b03058fc6f8",
            "71fa902dccb4cb5a"
        ],
        "x": 24,
        "y": 463,
        "w": 652,
        "h": 258
    },
    {
        "id": "40dcfdd7e47f8573",
        "type": "group",
        "z": "a29cf0664c167293",
        "name": "Extended version of simple template using the ES Module version of the client \\n ",
        "style": {
            "fill": "#ffffbf",
            "fill-opacity": "0.32",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "d12df878ac1b5714",
            "b921d7d1a7e06035",
            "8ca1a701441a31fa",
            "598ecb0adfa8fc5a",
            "599391803941e233",
            "958c94c7f03a6624",
            "5a3c5e4b8751fea2",
            "863c33dc4dab0216",
            "6e760e4d72cb74a7",
            "0ce0de04fb70fda9",
            "ca0007816b9f4419",
            "b28745cf103fce72"
        ],
        "x": 34,
        "y": 763,
        "w": 643,
        "h": 258
    },
    {
        "id": "ae89de23bbb814c1",
        "type": "group",
        "z": "a29cf0664c167293",
        "name": "uibuilder IIFE client in conjunction with Svelte",
        "style": {
            "fill": "#bfc7d7",
            "fill-opacity": "0.31",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ec93b864b4127859",
            "ab686ecd6ae447e3",
            "1e26ba1f939b35a4",
            "a9e607e92e5e2c93",
            "53f930dee4d661c0",
            "a75bacf5b8e676fb",
            "c6965c37441712a2",
            "28cb6bf6fb33f77c",
            "1813ac9ca8eeb177",
            "85733cc425b92915",
            "f0c89ce59299d66c",
            "43b416daeed4d5cb",
            "6b8fde3712999f7e"
        ],
        "x": 34,
        "y": 1079,
        "w": 652,
        "h": 448
    },
    {
        "id": "cb13651b4e3aee58",
        "type": "group",
        "z": "a29cf0664c167293",
        "name": "Old \"Blank\" template using uibuilderfe client - should no longer be used - kept for reference \\n ",
        "style": {
            "fill": "#ffbfbf",
            "fill-opacity": "0.26",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ddb950ebb37ff3e5",
            "ca085978f7a1d622",
            "7b2410170a094534",
            "cfd5eba13fe03d51",
            "6238dd35c69f44f6",
            "c458491d5a2fb1e2",
            "398b84708d487dad",
            "e03509eff4a1c892"
        ],
        "x": 34,
        "y": 2223,
        "w": 642,
        "h": 178
    },
    {
        "id": "43b416daeed4d5cb",
        "type": "group",
        "z": "a29cf0664c167293",
        "g": "ae89de23bbb814c1",
        "name": "Add/remove dynamic list",
        "style": {
            "label": true,
            "fill": "#ffffff",
            "fill-opacity": "0.5",
            "color": "#777777"
        },
        "nodes": [
            "7580041a7e962524",
            "d2c23f660fba67cf",
            "bc0a93a1ec21c077"
        ],
        "x": 74,
        "y": 1379,
        "w": 492,
        "h": 122,
        "info": "Demonstrates that uibuilder's dynamic ui\r\nfeatures work with Svelte."
    },
    {
        "id": "0368db6d7d446339",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "x": 390,
        "y": 200,
        "wires": [
            [
                "877b43edd7251acc"
            ]
        ]
    },
    {
        "id": "d48166077d1f76af",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "fc8f1db4547ef664",
        "x": 410,
        "y": 1960,
        "wires": [
            [
                "909a45a07adf4caf"
            ]
        ]
    },
    {
        "id": "05cb4b03058fc6f8",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "31c2d342f75d0ef8",
        "x": 330,
        "y": 580,
        "wires": [
            [
                "d0b6170b92cd6064"
            ]
        ]
    },
    {
        "id": "e03509eff4a1c892",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "cb13651b4e3aee58",
        "x": 340,
        "y": 2320,
        "wires": [
            [
                "ddb950ebb37ff3e5"
            ]
        ]
    },
    {
        "id": "ca0007816b9f4419",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "40dcfdd7e47f8573",
        "x": 340,
        "y": 880,
        "wires": [
            [
                "d12df878ac1b5714"
            ]
        ]
    },
    {
        "id": "7ee9528a1b19eb12",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "x": 420,
        "y": 1680,
        "wires": [
            [
                "4b0be73d7c1879b9"
            ]
        ]
    },
    {
        "id": "81bf7609272ef9af",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "x": 340,
        "y": 1620,
        "wires": [
            [
                "7ee9528a1b19eb12"
            ]
        ]
    },
    {
        "id": "c1d0beb7a8dcf573",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "x": 340,
        "y": 1740,
        "wires": [
            [
                "7ee9528a1b19eb12"
            ]
        ]
    },
    {
        "id": "1b6a3d16ed9f9995",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "x": 340,
        "y": 1700,
        "wires": [
            [
                "7ee9528a1b19eb12"
            ]
        ]
    },
    {
        "id": "3e569dd871349f93",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "fc8f1db4547ef664",
        "x": 350,
        "y": 2020,
        "wires": [
            [
                "d48166077d1f76af"
            ]
        ]
    },
    {
        "id": "dd004a6a442ee6a8",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "fc8f1db4547ef664",
        "x": 350,
        "y": 1980,
        "wires": [
            [
                "d48166077d1f76af"
            ]
        ]
    },
    {
        "id": "079a6828b01e3ca4",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "x": 1160,
        "y": 1680,
        "wires": [
            [
                "9df22ce79ef39e07"
            ]
        ]
    },
    {
        "id": "168b498f7d93b9ca",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "x": 1080,
        "y": 1620,
        "wires": [
            [
                "079a6828b01e3ca4"
            ]
        ]
    },
    {
        "id": "35591e8d08b9a8dc",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "x": 1080,
        "y": 1740,
        "wires": [
            [
                "079a6828b01e3ca4"
            ]
        ]
    },
    {
        "id": "949ddd795829e86e",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "x": 1080,
        "y": 1700,
        "wires": [
            [
                "079a6828b01e3ca4"
            ]
        ]
    },
    {
        "id": "f0c89ce59299d66c",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "ae89de23bbb814c1",
        "x": 360,
        "y": 1240,
        "wires": [
            [
                "ab686ecd6ae447e3"
            ]
        ]
    },
    {
        "id": "d66f87eca883848e",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "946ef719ea12bc08",
        "x": 1160,
        "y": 1960,
        "wires": [
            [
                "31310a6648a194ce"
            ]
        ]
    },
    {
        "id": "619d338c7eba7669",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "946ef719ea12bc08",
        "x": 1090,
        "y": 2020,
        "wires": [
            [
                "d66f87eca883848e"
            ]
        ]
    },
    {
        "id": "7ce2b59950e22ecb",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "946ef719ea12bc08",
        "x": 1090,
        "y": 1980,
        "wires": [
            [
                "d66f87eca883848e"
            ]
        ]
    },
    {
        "id": "f12f44c1b6da7192",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "x": 330,
        "y": 260,
        "wires": [
            [
                "0368db6d7d446339"
            ]
        ]
    },
    {
        "id": "3c2b5cb8448dbb64",
        "type": "junction",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "x": 610,
        "y": 260,
        "wires": [
            [
                "7011f3686a81d7eb"
            ]
        ]
    },
    {
        "id": "a58e6387f04561da",
        "type": "ui_tab",
        "name": "River",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0dac8e42c09dcadf",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "a5d3a21adf49b4af",
        "type": "ui_group",
        "d": true,
        "name": "River",
        "tab": "a58e6387f04561da",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": true,
        "className": ""
    },
    {
        "id": "178a50aa1245cf00",
        "type": "mqtt-broker",
        "name": "outside",
        "broker": "192.168.1.17",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "30",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "test_data",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2fc1ce28a58b1ce7",
        "type": "ui_group",
        "name": "River1",
        "tab": "a58e6387f04561da",
        "order": 2,
        "disp": true,
        "width": "15",
        "collapse": true,
        "className": ""
    },
    {
        "id": "703824db.9d74a4",
        "type": "ui_group",
        "name": "River2",
        "tab": "a58e6387f04561da",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": true,
        "className": ""
    },
    {
        "id": "2ac8e3fa.8b8584",
        "type": "ui_group",
        "d": true,
        "name": "Default",
        "tab": "ebb1ed1c.5ebe2",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "da91e2e4.019118",
        "type": "ui_tab",
        "name": "2nd input",
        "icon": "dashboard",
        "disabled": true,
        "hidden": true
    },
    {
        "id": "ebb1ed1c.5ebe2",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": true,
        "hidden": false
    },
    {
        "id": "6d70096c.acbce8",
        "type": "sqlitedb",
        "db": "/home/cuthbert/Desktop/node-red testing folder/sensor_data.db",
        "mode": "RW"
    },
    {
        "id": "41e0319c.240b28",
        "type": "sqlitedb",
        "d": true,
        "db": "c:\\users\\steve\\.node-red\\test.db",
        "mode": "RWC"
    },
    {
        "id": "338caca30bb130d2",
        "type": "global-config",
        "name": "global-config",
        "env": [
            {
                "name": "Cuthbert",
                "value": "__PWRD__",
                "type": "cred"
            },
            {
                "name": "cuthbert",
                "value": "",
                "type": "env"
            }
        ]
    },
    {
        "id": "afc328fce936e3bf",
        "type": "ui-base",
        "name": "UInew",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": true,
        "navigationStyle": "default"
    },
    {
        "id": "d28a2fbde4b06184",
        "type": "ui-theme",
        "name": "Theme1",
        "colors": {
            "surface": "#ffffff",
            "primary": "#71aec6",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "b9f2467d3ce29265",
        "type": "ui-page",
        "d": true,
        "name": "Front Page",
        "ui": "afc328fce936e3bf",
        "path": "/page1",
        "icon": "Home",
        "layout": "grid",
        "theme": "d28a2fbde4b06184",
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "0e6cd99c91b690ee",
        "type": "ui-group",
        "d": true,
        "name": "NewGroup",
        "page": "b9f2467d3ce29265",
        "width": "6",
        "height": "1",
        "order": -1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "e0fdefaa9f27b1df",
        "type": "mqtt-broker",
        "name": "local",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": false,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7ec1816e7188059d",
        "type": "ui-link",
        "d": true,
        "name": "Link",
        "ui": "afc328fce936e3bf",
        "path": "/",
        "icon": "home",
        "order": 1,
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "efffdb7cf706f095",
        "type": "ui-theme",
        "name": "Theme 2",
        "colors": {
            "surface": "#d24646",
            "primary": "#dee891",
            "bgPage": "#23a93e",
            "groupBg": "#21931f",
            "groupOutline": "#7a5353"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "660ac543c16a2953",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "1c78dc5a51398669",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 7,
        "width": 5,
        "height": 1
    },
    {
        "id": "5c617a6d3afb286b",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "d2cf7a54f70d6670",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "59c7bccc4576a9a4",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 10,
        "width": 10,
        "height": 1
    },
    {
        "id": "4859718b880caf76",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 11,
        "width": 15,
        "height": 1
    },
    {
        "id": "7f75376753da00f9",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 12,
        "width": 15,
        "height": 1
    },
    {
        "id": "f714cf24eeea3e15",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 13,
        "width": 15,
        "height": 1
    },
    {
        "id": "db3ed1cd7592677a",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 15,
        "width": 15,
        "height": 1
    },
    {
        "id": "ae51f3f3ca1674fc",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 16,
        "width": 9,
        "height": 1
    },
    {
        "id": "c3707f311e7f4752",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "f93ca6bc0e76a85f",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 19,
        "width": 9,
        "height": 1
    },
    {
        "id": "3ec01a5433f49c68",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "e4113f7cfb5fcc63",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 21,
        "width": 9,
        "height": 1
    },
    {
        "id": "9f5c2d6db91ea88f",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "29a791402c07f8a3",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 23,
        "width": 9,
        "height": 1
    },
    {
        "id": "72f36707be980a78",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "e73b22fda65d4186",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 25,
        "width": 10,
        "height": 1
    },
    {
        "id": "a9deac3fdf7ed2ec",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 27,
        "width": 2,
        "height": 1
    },
    {
        "id": "6206652480e22dd9",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 28,
        "width": 10,
        "height": 1
    },
    {
        "id": "82180aabf098af70",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 29,
        "width": 2,
        "height": 1
    },
    {
        "id": "def4e13bdcd04199",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 30,
        "width": 10,
        "height": 1
    },
    {
        "id": "8ceeb2fbc3f189e5",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 31,
        "width": 2,
        "height": 1
    },
    {
        "id": "5ecd0a73d64925c7",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 32,
        "width": 10,
        "height": 1
    },
    {
        "id": "9d07201a348015b2",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 33,
        "width": 2,
        "height": 1
    },
    {
        "id": "29e93a70f4cea6ee",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 34,
        "width": 10,
        "height": 1
    },
    {
        "id": "7cddfdaa60fd8b27",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 35,
        "width": 2,
        "height": 1
    },
    {
        "id": "9947d64d3c1024c4",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 36,
        "width": 10,
        "height": 1
    },
    {
        "id": "6cb48b128d45fa18",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 37,
        "width": 2,
        "height": 1
    },
    {
        "id": "94417d57054d33fc",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 38,
        "width": 10,
        "height": 1
    },
    {
        "id": "78a080b850bdb651",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 39,
        "width": 2,
        "height": 1
    },
    {
        "id": "5bf0a5c8b2412749",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 40,
        "width": 15,
        "height": 1
    },
    {
        "id": "a8a394e995828029",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 41,
        "width": 15,
        "height": 1
    },
    {
        "id": "ab04b6d9c757cc71",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 42,
        "width": 15,
        "height": 1
    },
    {
        "id": "2fccc82376dcd4db",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 43,
        "width": 15,
        "height": 1
    },
    {
        "id": "10d8cc8cb4d14fca",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 44,
        "width": 15,
        "height": 1
    },
    {
        "id": "220a28d7beed7d90",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 45,
        "width": 15,
        "height": 1
    },
    {
        "id": "056ca4707d5ef98c",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 46,
        "width": 15,
        "height": 1
    },
    {
        "id": "e245d75b063681b9",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 47,
        "width": 15,
        "height": 1
    },
    {
        "id": "17384cd2e805f196",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 48,
        "width": 15,
        "height": 1
    },
    {
        "id": "2bd9afd56a578097",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 49,
        "width": 15,
        "height": 1
    },
    {
        "id": "794b0e6c7ceb49e0",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 50,
        "width": 15,
        "height": 1
    },
    {
        "id": "19a92332d3fc75de",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 51,
        "width": 15,
        "height": 1
    },
    {
        "id": "182b42573b92a843",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 52,
        "width": 15,
        "height": 1
    },
    {
        "id": "5801412d8c6057f4",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 55,
        "width": 3,
        "height": 1
    },
    {
        "id": "e01d1406eb8faa56",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 56,
        "width": 3,
        "height": 1
    },
    {
        "id": "a5f2480e32aeb15b",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 57,
        "width": 3,
        "height": 1
    },
    {
        "id": "aa96ca64ac079af6",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 58,
        "width": 3,
        "height": 1
    },
    {
        "id": "5fc471aac2a7918e",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 59,
        "width": 3,
        "height": 1
    },
    {
        "id": "aba8b53617caa41d",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 61,
        "width": 3,
        "height": 1
    },
    {
        "id": "e2e93b3efdb22f55",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 63,
        "width": 2,
        "height": 1
    },
    {
        "id": "1d5e40a5456b2f0a",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 64,
        "width": 3,
        "height": 1
    },
    {
        "id": "2ffde7aa89da0566",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 65,
        "width": 2,
        "height": 1
    },
    {
        "id": "f816df5dff01eda9",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 66,
        "width": 3,
        "height": 1
    },
    {
        "id": "92a5cad85baa7845",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 67,
        "width": 2,
        "height": 1
    },
    {
        "id": "2ba627710bcbe533",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 68,
        "width": 3,
        "height": 1
    },
    {
        "id": "b72eb761867ef90f",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 69,
        "width": 6,
        "height": 1
    },
    {
        "id": "1e39c04831614d34",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 70,
        "width": 3,
        "height": 1
    },
    {
        "id": "0f8f63a83fc18cf2",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 71,
        "width": 6,
        "height": 1
    },
    {
        "id": "9dd7edbeb1e8f976",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 72,
        "width": 3,
        "height": 1
    },
    {
        "id": "6a4f2aa9c13ff20e",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "703824db.9d74a4",
        "order": 4,
        "width": 6,
        "height": 1
    },
    {
        "id": "992e9b48ccc26a78",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "703824db.9d74a4",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "ea37e414fabc22b8",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "703824db.9d74a4",
        "order": 6,
        "width": 6,
        "height": 1
    },
    {
        "id": "02c873f79667c087",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "703824db.9d74a4",
        "order": 11,
        "width": 15,
        "height": 1
    },
    {
        "id": "d3151c86bec66787",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "2fc1ce28a58b1ce7",
        "order": 7,
        "width": 7,
        "height": 1
    },
    {
        "id": "0fdc6540e34d2c9b",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "2fc1ce28a58b1ce7",
        "order": 8,
        "width": 7,
        "height": 1
    },
    {
        "id": "854f01d378dedc82",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "2fc1ce28a58b1ce7",
        "order": 9,
        "width": 7,
        "height": 1
    },
    {
        "id": "5dc862d0adeaf6ef",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "2fc1ce28a58b1ce7",
        "order": 10,
        "width": 7,
        "height": 1
    },
    {
        "id": "6e51f9fb3a535177",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "2fc1ce28a58b1ce7",
        "order": 11,
        "width": 7,
        "height": 1
    },
    {
        "id": "7460cb5434b4bc79",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "2fc1ce28a58b1ce7",
        "order": 12,
        "width": 7,
        "height": 1
    },
    {
        "id": "482dbb5ac9ed40e3",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 5,
        "width": 5,
        "height": 1
    },
    {
        "id": "bee91add64e8672d",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 7,
        "width": 5,
        "height": 1
    },
    {
        "id": "57aca75d4f5f8b9a",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 8,
        "width": 5,
        "height": 1
    },
    {
        "id": "bb3919351c742b5c",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 9,
        "width": 5,
        "height": 1
    },
    {
        "id": "8673538768df5d26",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 10,
        "width": 10,
        "height": 1
    },
    {
        "id": "6dab83e440ef68cc",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 11,
        "width": 15,
        "height": 1
    },
    {
        "id": "8173e1fd1830cb16",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 12,
        "width": 15,
        "height": 1
    },
    {
        "id": "c913075364252e7a",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 13,
        "width": 15,
        "height": 1
    },
    {
        "id": "9544dc5af3fe224e",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 15,
        "width": 15,
        "height": 1
    },
    {
        "id": "955a77b08037c1f1",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 16,
        "width": 9,
        "height": 1
    },
    {
        "id": "ef69a80d1af721c5",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 18,
        "width": 1,
        "height": 1
    },
    {
        "id": "466c418cf27905fb",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 19,
        "width": 9,
        "height": 1
    },
    {
        "id": "9a8af7742c98500b",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "8ac50291f72282cf",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 21,
        "width": 9,
        "height": 1
    },
    {
        "id": "09aea1f71551936e",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 22,
        "width": 1,
        "height": 1
    },
    {
        "id": "1f26f9d46a6a9acc",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 23,
        "width": 9,
        "height": 1
    },
    {
        "id": "f9d22ee3f7893ee2",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 24,
        "width": 1,
        "height": 1
    },
    {
        "id": "a9877882443f9e32",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 25,
        "width": 10,
        "height": 1
    },
    {
        "id": "ef27105f6101410e",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 27,
        "width": 2,
        "height": 1
    },
    {
        "id": "b59c4a63931d91a5",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 28,
        "width": 10,
        "height": 1
    },
    {
        "id": "9ca0cee8bf738a94",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 29,
        "width": 2,
        "height": 1
    },
    {
        "id": "d065966248cba00c",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 30,
        "width": 10,
        "height": 1
    },
    {
        "id": "c6403420120a12ef",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 31,
        "width": 2,
        "height": 1
    },
    {
        "id": "7034e7dba2f8d94c",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 32,
        "width": 10,
        "height": 1
    },
    {
        "id": "8a04557b5158e168",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 33,
        "width": 2,
        "height": 1
    },
    {
        "id": "e9efba497e72dbc5",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 34,
        "width": 10,
        "height": 1
    },
    {
        "id": "6b7a761495258777",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 35,
        "width": 2,
        "height": 1
    },
    {
        "id": "13a512dc6a506970",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 36,
        "width": 10,
        "height": 1
    },
    {
        "id": "59c013c83841b577",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 37,
        "width": 2,
        "height": 1
    },
    {
        "id": "873a6724bfb05ee5",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 38,
        "width": 10,
        "height": 1
    },
    {
        "id": "4671181b06d89b8b",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 39,
        "width": 2,
        "height": 1
    },
    {
        "id": "182f054d0dfe0763",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 40,
        "width": 15,
        "height": 1
    },
    {
        "id": "9c8487d8f16fbb7d",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 41,
        "width": 15,
        "height": 1
    },
    {
        "id": "eb911003704d28ee",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 42,
        "width": 15,
        "height": 1
    },
    {
        "id": "22b486c0b0198a54",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 43,
        "width": 15,
        "height": 1
    },
    {
        "id": "56dc596b44dd9b46",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 44,
        "width": 15,
        "height": 1
    },
    {
        "id": "ed809711c49c23f1",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 45,
        "width": 15,
        "height": 1
    },
    {
        "id": "34106bb6545433ca",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 46,
        "width": 15,
        "height": 1
    },
    {
        "id": "311358fcae5a6dfb",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 47,
        "width": 15,
        "height": 1
    },
    {
        "id": "377302ad3c2304f6",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 48,
        "width": 15,
        "height": 1
    },
    {
        "id": "57a2c334a094dc29",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 49,
        "width": 15,
        "height": 1
    },
    {
        "id": "a39895e96b61482b",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 50,
        "width": 15,
        "height": 1
    },
    {
        "id": "efc4c563a09fa2fc",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 51,
        "width": 15,
        "height": 1
    },
    {
        "id": "f492311540e55027",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 52,
        "width": 15,
        "height": 1
    },
    {
        "id": "9401fbe62553fda1",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 55,
        "width": 3,
        "height": 1
    },
    {
        "id": "a42d6f2cac3d90d9",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 56,
        "width": 3,
        "height": 1
    },
    {
        "id": "44718fedc63eaa7e",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 57,
        "width": 3,
        "height": 1
    },
    {
        "id": "dc84c05d3535d569",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 58,
        "width": 3,
        "height": 1
    },
    {
        "id": "0b5fe3210b118c84",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 59,
        "width": 3,
        "height": 1
    },
    {
        "id": "abcea7225a61d2e6",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 61,
        "width": 3,
        "height": 1
    },
    {
        "id": "dcbf1394f7a43349",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 63,
        "width": 2,
        "height": 1
    },
    {
        "id": "4d5b55acb308a1f7",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 64,
        "width": 3,
        "height": 1
    },
    {
        "id": "deee30bf63b5fb82",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 65,
        "width": 2,
        "height": 1
    },
    {
        "id": "1e0f61f411c6836b",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 66,
        "width": 3,
        "height": 1
    },
    {
        "id": "a1631f6637bbf9ca",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 67,
        "width": 2,
        "height": 1
    },
    {
        "id": "4da9b5321935ff60",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 68,
        "width": 3,
        "height": 1
    },
    {
        "id": "44fa0720b59b7934",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 69,
        "width": 6,
        "height": 1
    },
    {
        "id": "8943e46d2a2340f2",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 70,
        "width": 3,
        "height": 1
    },
    {
        "id": "a13f1914fc29df37",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 71,
        "width": 6,
        "height": 1
    },
    {
        "id": "59efad81266262e1",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "a5d3a21adf49b4af",
        "order": 72,
        "width": 3,
        "height": 1
    },
    {
        "id": "15f132e023eab8bb",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "703824db.9d74a4",
        "order": 4,
        "width": 6,
        "height": 1
    },
    {
        "id": "9a22646b2d6a17c0",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "703824db.9d74a4",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "9cd2b83782f5e21c",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "703824db.9d74a4",
        "order": 6,
        "width": 6,
        "height": 1
    },
    {
        "id": "9f25c413316fa865",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "703824db.9d74a4",
        "order": 11,
        "width": 15,
        "height": 1
    },
    {
        "id": "6e28d95dc2de5148",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "2fc1ce28a58b1ce7",
        "order": 7,
        "width": 7,
        "height": 1
    },
    {
        "id": "1ee835d0b8a03b06",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "2fc1ce28a58b1ce7",
        "order": 8,
        "width": 7,
        "height": 1
    },
    {
        "id": "325d23aac6fc97df",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "2fc1ce28a58b1ce7",
        "order": 9,
        "width": 7,
        "height": 1
    },
    {
        "id": "9238934aae04b432",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "2fc1ce28a58b1ce7",
        "order": 10,
        "width": 7,
        "height": 1
    },
    {
        "id": "0408fef341650c78",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "2fc1ce28a58b1ce7",
        "order": 11,
        "width": 7,
        "height": 1
    },
    {
        "id": "1906904f5261ecd5",
        "type": "ui_spacer",
        "z": "d8033d206022253c",
        "name": "spacer",
        "group": "2fc1ce28a58b1ce7",
        "order": 12,
        "width": 7,
        "height": 1
    },
    {
        "id": "f708896cb0492768",
        "type": "uibuilder",
        "z": "73393adb9ca26544",
        "name": "",
        "topic": "",
        "okToGo": false,
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "blank",
        "extTemplate": "",
        "showfolder": false,
        "reload": false,
        "sourceFolder": "src",
        "showMsgUib": false,
        "title": "",
        "descr": "",
        "x": 440,
        "y": 800,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d7cb8e8311cf984f",
        "type": "mqtt in",
        "z": "38240a5a23fafee4",
        "name": "test_data",
        "topic": "test_data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e0fdefaa9f27b1df",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 60,
        "y": 280,
        "wires": [
            [
                "4e60c868b2c4e276",
                "827b15d05456ff78",
                "ee54db14f7d40cc2",
                "398d19f9d9649d2c",
                "0b893f145ecc80a6",
                "069b176dd23b0419"
            ]
        ]
    },
    {
        "id": "4e60c868b2c4e276",
        "type": "json",
        "z": "38240a5a23fafee4",
        "name": "test_data",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 240,
        "y": 280,
        "wires": [
            [
                "98934c617ec031ca",
                "eb04bd32b445be58",
                "825df2569933dce7",
                "99b1eb12ef24eabb",
                "6186111f1db84628",
                "bcb4e8ce81dbb2a0"
            ]
        ]
    },
    {
        "id": "0b893f145ecc80a6",
        "type": "debug",
        "z": "38240a5a23fafee4",
        "name": "debugcb",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 40,
        "wires": []
    },
    {
        "id": "67287e4beba8ae5e",
        "type": "ui_chart",
        "z": "38240a5a23fafee4",
        "name": "temperaturechart",
        "group": "703824db.9d74a4",
        "order": 7,
        "width": 8,
        "height": 6,
        "label": "Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "50",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "98934c617ec031ca",
        "type": "function",
        "z": "38240a5a23fafee4",
        "name": "function 8",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\n// Construct separate messages for each data point\nconst temperatureMessage = {\n  topic: \"Temperature\", // More descriptive topic name\n  payload: temperatureValue\n};\n\n// Return both messages in an array\nreturn [temperatureMessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 180,
        "wires": [
            [
                "67287e4beba8ae5e",
                "c973cca490dff1b9"
            ]
        ]
    },
    {
        "id": "069b176dd23b0419",
        "type": "debug",
        "z": "38240a5a23fafee4",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 40,
        "wires": []
    },
    {
        "id": "eb04bd32b445be58",
        "type": "function",
        "z": "38240a5a23fafee4",
        "name": "function 9",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\n  if (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet Humidityvalue = parseFloat(msg.payload.Humidity);\n  if (isNaN(Humidityvalue)) {\n  Humidityvalue = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst Humiditymessage = {\n  topic: \"Humidity\", // More descriptive topic name\n  payload: Humidityvalue\n};\n\n// Return both messages in an array\nreturn [Humiditymessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "3ab5c0f6871d7a58",
                "919f8d3e743fed46"
            ]
        ]
    },
    {
        "id": "919f8d3e743fed46",
        "type": "ui_chart",
        "z": "38240a5a23fafee4",
        "name": "Humidity",
        "group": "703824db.9d74a4",
        "order": 8,
        "width": 7,
        "height": 6,
        "label": "Humidity",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 220,
        "wires": [
            [
                "64b67bf5093a084b"
            ]
        ]
    },
    {
        "id": "1ebfc4ad28a3254d",
        "type": "file",
        "z": "38240a5a23fafee4",
        "name": "",
        "filename": "/home/cuthbert/Desktop/node-red testing folder/file2.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "setbymsg",
        "x": 950,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "827b15d05456ff78",
        "type": "json",
        "z": "38240a5a23fafee4",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 230,
        "y": 560,
        "wires": [
            [
                "1d68c244c5d29ab2"
            ]
        ]
    },
    {
        "id": "1d68c244c5d29ab2",
        "type": "csv",
        "z": "38240a5a23fafee4",
        "name": "test_data",
        "sep": ",",
        "hdrin": false,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": false,
        "x": 440,
        "y": 580,
        "wires": [
            [
                "1ebfc4ad28a3254d"
            ]
        ]
    },
    {
        "id": "825df2569933dce7",
        "type": "function",
        "z": "38240a5a23fafee4",
        "name": "function 10",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet rollingAve = parseFloat(msg.payload.Ave1);\n// Handle potential errors:\nif (isNaN(rollingAve)) {\n  rollingAve = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveMessage = {\n  topic: \"Average\", // More descriptive topic name\n  payload: rollingAve\n};\n\n// Return both messages in an array\nreturn [aveMessage];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 260,
        "wires": [
            [
                "1e8c99fa575e3619"
            ]
        ]
    },
    {
        "id": "1e8c99fa575e3619",
        "type": "ui_gauge",
        "z": "38240a5a23fafee4",
        "name": "Ave1",
        "group": "703824db.9d74a4",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Rolling average for the last 6 minutes.",
        "label": "units",
        "format": "{{value}}",
        "min": "40",
        "max": "45",
        "colors": [
            "#0062ff",
            "#00e626",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 890,
        "y": 260,
        "wires": []
    },
    {
        "id": "99b1eb12ef24eabb",
        "type": "function",
        "z": "38240a5a23fafee4",
        "name": "function 11",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\nlet Ave1 = parseFloat(msg.payload.Ave1);\nif (isNaN(Ave1)) {\n  Ave1 = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveWeek = parseFloat(msg.payload.AveWeek);\n// Handle potential errors:\nif (isNaN(AveWeek)) {\n  AveWeek = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveMessage = {\n  topic: \"Average\", // More descriptive topic name\n  payload: AveWeek\n};\n\n// Return both messages in an array\nreturn [aveMessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 300,
        "wires": [
            [
                "d8f6617ce5cc0b17"
            ]
        ]
    },
    {
        "id": "6186111f1db84628",
        "type": "function",
        "z": "38240a5a23fafee4",
        "name": "function 12",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet DO = parseFloat(msg.payload.DO);\nif (isNaN(DO)) {\n  DO = 0; // Or handle the error differently\n}\n\nlet Ave1 = parseFloat(msg.payload.Ave1);\nif (isNaN(Ave1)) {\n  Ave1 = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveWeek = parseFloat(msg.payload.AveWeek);\n// Handle potential errors:\nif (isNaN(AveWeek)) {\n  AveWeek = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveMonth = parseFloat(msg.payload.AveMonth);\n// Handle potential errors:\nif (isNaN(AveMonth)) {\n  AveMonth = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveMessage = {\n  topic: \"Average\", // More descriptive topic name\n  payload: AveMonth\n};\n\n// Return both messages in an array\nreturn [aveMessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 340,
        "wires": [
            [
                "c973cca490dff1b9"
            ]
        ]
    },
    {
        "id": "d8f6617ce5cc0b17",
        "type": "ui_gauge",
        "z": "38240a5a23fafee4",
        "name": "Last Weeks Average",
        "group": "703824db.9d74a4",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Rolling average of the temperature for the last 30 minutes",
        "label": "units",
        "format": "{{value}}",
        "min": "40",
        "max": "45",
        "colors": [
            "#0040ff",
            "#00ff2a",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 780,
        "y": 300,
        "wires": []
    },
    {
        "id": "c973cca490dff1b9",
        "type": "ui_gauge",
        "z": "38240a5a23fafee4",
        "name": "Average of Last Month",
        "group": "703824db.9d74a4",
        "order": 3,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Rolling average of the temperature for the last hour",
        "label": "units",
        "format": "{{value}}",
        "min": "40",
        "max": "45",
        "colors": [
            "#0109f9",
            "#00ff04",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 780,
        "y": 340,
        "wires": []
    },
    {
        "id": "2a9429dab4e4700e",
        "type": "ui_worldmap",
        "z": "38240a5a23fafee4",
        "group": "703824db.9d74a4",
        "order": 10,
        "width": 7,
        "height": 6,
        "name": "Hathersage sensor",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OpTop",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO",
        "maplist": "UKOS,OpTop",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 710,
        "y": 640,
        "wires": []
    },
    {
        "id": "3fd17778688f7392",
        "type": "inject",
        "z": "38240a5a23fafee4",
        "name": "Co ordinates for Hathersage",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"name\":\"My Marker\",\"lat\":53.3303,\"lon\":-1.65398}",
        "payloadType": "json",
        "x": 360,
        "y": 640,
        "wires": [
            [
                "2a9429dab4e4700e"
            ]
        ]
    },
    {
        "id": "3ab5c0f6871d7a58",
        "type": "debug",
        "z": "38240a5a23fafee4",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 40,
        "wires": []
    },
    {
        "id": "64b67bf5093a084b",
        "type": "debug",
        "z": "38240a5a23fafee4",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 220,
        "wires": []
    },
    {
        "id": "ee54db14f7d40cc2",
        "type": "json",
        "z": "38240a5a23fafee4",
        "d": true,
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 390,
        "y": 140,
        "wires": [
            [
                "2ecbabc8109cd63b"
            ]
        ]
    },
    {
        "id": "2ecbabc8109cd63b",
        "type": "debug",
        "z": "38240a5a23fafee4",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 140,
        "wires": []
    },
    {
        "id": "bcb4e8ce81dbb2a0",
        "type": "function",
        "z": "38240a5a23fafee4",
        "name": "function 20",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n    temperatureValue = 0; // Or handle the error differently\n}\n\nlet Pressure = parseFloat(msg.payload.Pressure);\nif (isNaN(Pressure)) {\n    Pressure = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst pressuremessage = {\n    topic: \"Pressure\", // More descriptive topic name\n    payload: Pressure\n};\n\n// Return both messages in an array\nreturn [pressuremessage];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 400,
        "wires": [
            [
                "fc1516c7b6983a39"
            ]
        ]
    },
    {
        "id": "fc1516c7b6983a39",
        "type": "ui_chart",
        "z": "38240a5a23fafee4",
        "name": "Pressure",
        "group": "703824db.9d74a4",
        "order": 9,
        "width": 8,
        "height": 6,
        "label": "Pressure",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "11372edd376acd39",
        "type": "sqlite",
        "z": "38240a5a23fafee4",
        "d": true,
        "mydb": "6d70096c.acbce8",
        "sqlquery": "prepared",
        "sql": "",
        "name": "sensor_data.db",
        "x": 460,
        "y": 480,
        "wires": [
            [
                "ac29d091af3c97a6"
            ]
        ]
    },
    {
        "id": "ac29d091af3c97a6",
        "type": "debug",
        "z": "38240a5a23fafee4",
        "d": true,
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 480,
        "wires": []
    },
    {
        "id": "398d19f9d9649d2c",
        "type": "json",
        "z": "38240a5a23fafee4",
        "d": true,
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 270,
        "y": 480,
        "wires": [
            [
                "11372edd376acd39"
            ]
        ]
    },
    {
        "id": "33f73603fcd12055",
        "type": "ui_form",
        "z": "38240a5a23fafee4",
        "name": "Event Log",
        "label": "Event log",
        "group": "703824db.9d74a4",
        "order": 13,
        "width": 15,
        "height": 7,
        "options": [
            {
                "label": "Name",
                "value": "Name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Email",
                "value": "Email",
                "type": "email",
                "required": true,
                "rows": null
            },
            {
                "label": "Date",
                "value": "Date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Time",
                "value": "Time",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Event",
                "value": "Event",
                "type": "multiline",
                "required": false,
                "rows": 3
            }
        ],
        "formValue": {
            "Name": "",
            "Email": "",
            "Date": "",
            "Time": "",
            "Event": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 320,
        "y": 520,
        "wires": [
            [
                "554ec710843b996f"
            ]
        ]
    },
    {
        "id": "554ec710843b996f",
        "type": "csv",
        "z": "38240a5a23fafee4",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 490,
        "y": 520,
        "wires": [
            [
                "fdd0cc92be8f1418"
            ]
        ]
    },
    {
        "id": "fdd0cc92be8f1418",
        "type": "file",
        "z": "38240a5a23fafee4",
        "name": "",
        "filename": "/home/cuthbert/Desktop/node-red testing folder/eventlog.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "setbymsg",
        "x": 820,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "fd110f10a34a4b97",
        "type": "ui_button",
        "z": "38240a5a23fafee4",
        "name": "",
        "group": "703824db.9d74a4",
        "order": 132,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "press button to read the event log from this sensor",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 700,
        "wires": [
            [
                "a5540a7b9391add3"
            ]
        ]
    },
    {
        "id": "a864a576535e1e3c",
        "type": "ui_toast",
        "z": "38240a5a23fafee4",
        "position": "prompt",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1170,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "a5540a7b9391add3",
        "type": "file in",
        "z": "38240a5a23fafee4",
        "name": "eventlog-read",
        "filename": "/home/cuthbert/Desktop/node-red testing folder/eventlog.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 660,
        "y": 700,
        "wires": [
            [
                "85230d44e96d64e0"
            ]
        ]
    },
    {
        "id": "85230d44e96d64e0",
        "type": "csv",
        "z": "38240a5a23fafee4",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 870,
        "y": 700,
        "wires": [
            [
                "a864a576535e1e3c"
            ]
        ]
    },
    {
        "id": "87d79437.2ae63",
        "type": "template",
        "z": "7e9da581.12d884",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 420,
        "y": 80,
        "wires": [
            [
                "48f9cb0f.11ef64"
            ]
        ]
    },
    {
        "id": "ea4ab05f.f3a01",
        "type": "http in",
        "z": "7e9da581.12d884",
        "name": "",
        "url": "/hello",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 180,
        "wires": [
            [
                "87884965.a1d038"
            ]
        ]
    },
    {
        "id": "87884965.a1d038",
        "type": "template",
        "z": "7e9da581.12d884",
        "name": "page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<h1>Hello World</h1>",
        "x": 410,
        "y": 180,
        "wires": [
            [
                "36eaff0d.6a745"
            ]
        ]
    },
    {
        "id": "36eaff0d.6a745",
        "type": "http response",
        "z": "7e9da581.12d884",
        "name": "",
        "x": 570,
        "y": 180,
        "wires": []
    },
    {
        "id": "c113ac50.83092",
        "type": "inject",
        "z": "7e9da581.12d884",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "my test message",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "my test message",
        "payloadType": "str",
        "x": 240,
        "y": 80,
        "wires": [
            [
                "87d79437.2ae63"
            ]
        ]
    },
    {
        "id": "48f9cb0f.11ef64",
        "type": "debug",
        "z": "7e9da581.12d884",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 80,
        "wires": []
    },
    {
        "id": "2de9dbb1.43d54c",
        "type": "inject",
        "z": "7e9da581.12d884",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "my test message",
        "payloadType": "str",
        "x": 260,
        "y": 340,
        "wires": [
            [
                "d7de08ea.691788"
            ]
        ]
    },
    {
        "id": "d7de08ea.691788",
        "type": "template",
        "z": "7e9da581.12d884",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "This is the payload: {{payload}} !",
        "output": "str",
        "x": 440,
        "y": 340,
        "wires": [
            [
                "9ff48676.fd16c",
                "4e386838.452a7"
            ]
        ]
    },
    {
        "id": "9ff48676.fd16c",
        "type": "debug",
        "z": "7e9da581.12d884",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 590,
        "y": 280,
        "wires": []
    },
    {
        "id": "4e386838.452a7",
        "type": "ui_template",
        "z": "7e9da581.12d884",
        "d": true,
        "group": "703824db.9d74a4",
        "name": "",
        "order": 12,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 620,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "21b510e7.bd606",
        "type": "inject",
        "z": "7e9da581.12d884",
        "d": true,
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 620,
        "wires": [
            [
                "25e35be4.d9cf14"
            ]
        ]
    },
    {
        "id": "25e35be4.d9cf14",
        "type": "template",
        "z": "7e9da581.12d884",
        "d": true,
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "TIMESTAMP INT PRIMARY KEY NOT NULL,\nSENSOR TEXT NOT NULL,\nTEMPERATURE INT NOT NULL,\nHUMIDITY INT NOT NULL,",
        "output": "str",
        "x": 360,
        "y": 660,
        "wires": [
            [
                "812fef0f.5f39a8"
            ]
        ]
    },
    {
        "id": "812fef0f.5f39a8",
        "type": "function",
        "z": "7e9da581.12d884",
        "d": true,
        "name": "Create Table",
        "func": "var payload=msg.payload;\npayload = payload.replace(/(\\r\\n|\\n|\\r)/gm,\"\");\nmsg.topic=\"CREATE TABLE data(\"+payload + \")\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 580,
        "y": 620,
        "wires": [
            [
                "5d5a5d2e.18b7dc"
            ]
        ]
    },
    {
        "id": "5d5a5d2e.18b7dc",
        "type": "sqlite",
        "z": "7e9da581.12d884",
        "d": true,
        "mydb": "6d70096c.acbce8",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 810,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "536b480b.bce59",
        "type": "inject",
        "z": "7e9da581.12d884",
        "d": true,
        "name": "create database table",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "CREATE TABLE data(TIMESTAMP INT PRIMARY KEY NOT NULL, SENSOR TEXT NOT NULL, TEMPERATURE INT NOT NULL, HUMIDITY INT NOT NULL)",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 540,
        "wires": [
            [
                "6c4b2d27.5f0c54"
            ]
        ]
    },
    {
        "id": "6c4b2d27.5f0c54",
        "type": "sqlite",
        "z": "7e9da581.12d884",
        "d": true,
        "mydb": "41e0319c.240b28",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 620,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "ac2935e6.bcd3b",
        "type": "template",
        "z": "7e9da581.12d884",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\"hello\":\"world\"}",
        "output": "json",
        "x": 480,
        "y": 800,
        "wires": [
            [
                "efe20e39.01c918"
            ]
        ]
    },
    {
        "id": "af0e09c4.9688c8",
        "type": "inject",
        "z": "7e9da581.12d884",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "my test message",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "my test message",
        "payloadType": "str",
        "x": 300,
        "y": 820,
        "wires": [
            [
                "ac2935e6.bcd3b"
            ]
        ]
    },
    {
        "id": "efe20e39.01c918",
        "type": "debug",
        "z": "7e9da581.12d884",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 710,
        "y": 840,
        "wires": []
    },
    {
        "id": "c2daa4da.9946e8",
        "type": "inject",
        "z": "7e9da581.12d884",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1040,
        "wires": [
            [
                "f57180.3048f68"
            ]
        ]
    },
    {
        "id": "f57180.3048f68",
        "type": "function",
        "z": "7e9da581.12d884",
        "name": "",
        "func": "var array=[\"col1\",\"col2\",\"col3\"];\nmsg.payload=array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 1020,
        "wires": [
            [
                "d2c7aa60.d6f188"
            ]
        ]
    },
    {
        "id": "d2c7aa60.d6f188",
        "type": "template",
        "z": "7e9da581.12d884",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<h1>Array Example </h1>\n<table  class=\"table\">\n  <tr>\n\n   <th>COL</th>\n\n  \n  </tr>\n  \n  {{#payload}}\n  <tr>\n    <td>{{.}}</td> \n\n  </tr>\n{{/payload}}\n\n  \n</table>",
        "output": "str",
        "x": 600,
        "y": 1040,
        "wires": [
            [
                "938cf4b6.4b209",
                "d067db36.dfcee"
            ]
        ]
    },
    {
        "id": "938cf4b6.4b209",
        "type": "ui_template",
        "z": "7e9da581.12d884",
        "d": true,
        "group": "2ac8e3fa.8b8584",
        "name": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "\n<style>\n\n.headline\n{\n font-size:28px; \n  font-weight: bold;\n    \n}\n\n.table\n{\n   \n    width:500px;  \n}\n.main\n{\n    height:250px;\n    width:600px;\n    //background:#ffffc6;\n//border:1px solid black;\n}\n.table th,td\n{\nborder:1px solid black;\n}\n.table th\n{\n   background: yellow;\n}\n</style>\n\n<div class=\"main\" ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 800,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "d067db36.dfcee",
        "type": "debug",
        "z": "7e9da581.12d884",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 780,
        "y": 980,
        "wires": []
    },
    {
        "id": "5291adc4.ca319c",
        "type": "comment",
        "z": "7e9da581.12d884",
        "name": "array example1",
        "info": "",
        "x": 220,
        "y": 980,
        "wires": []
    },
    {
        "id": "3f693ba6.cbd6fc",
        "type": "inject",
        "z": "7e9da581.12d884",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 1440,
        "wires": [
            [
                "a8e7549e.1e21b"
            ]
        ]
    },
    {
        "id": "a8e7549e.1e21b",
        "type": "function",
        "z": "7e9da581.12d884",
        "name": "",
        "func": "var array=[\"col11\",\"col12\",\"col13\"];\nmsg.payload=array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 1380,
        "wires": [
            [
                "34fc0fe9.eaa53"
            ]
        ]
    },
    {
        "id": "34fc0fe9.eaa53",
        "type": "template",
        "z": "7e9da581.12d884",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<h1>Array Example </h1>\n<table  class=\"table\">\n  <tr>\n\n   <th>COL</th>\n\n  \n  </tr>\n  \n\n  <tr>\n    <td>{{payload.0}}</td> \n  <td>{{payload.1}}</td> \n    <td>{{payload.2}}</td> \n  </tr>\n\n\n  \n</table>",
        "output": "str",
        "x": 520,
        "y": 1440,
        "wires": [
            [
                "8badd99b.ac028",
                "bb0b93c9.3f1398"
            ]
        ]
    },
    {
        "id": "bb0b93c9.3f1398",
        "type": "debug",
        "z": "7e9da581.12d884",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 780,
        "y": 1400,
        "wires": []
    },
    {
        "id": "8badd99b.ac028",
        "type": "ui_template",
        "z": "7e9da581.12d884",
        "d": true,
        "group": "2ac8e3fa.8b8584",
        "name": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "\n<style>\n\n.headline\n{\n font-size:28px; \n  font-weight: bold;\n    \n}\n\n.table\n{\n   \n    width:500px;  \n}\n.main\n{\n    height:250px;\n    width:600px;\n    //background:#ffffc6;\n//border:1px solid black;\n}\n.table th,td\n{\nborder:1px solid black;\n}\n.table th\n{\n   background: yellow;\n}\n</style>\n\n<div class=\"main\" ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 780,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "e647140f.f13bc",
        "type": "comment",
        "z": "7e9da581.12d884",
        "name": "array example 2",
        "info": "",
        "x": 240,
        "y": 1340,
        "wires": []
    },
    {
        "id": "cf1d0117.9c8f",
        "type": "inject",
        "z": "7e9da581.12d884",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 1780,
        "wires": [
            [
                "6e13d933.a9d05"
            ]
        ]
    },
    {
        "id": "6e13d933.a9d05",
        "type": "function",
        "z": "7e9da581.12d884",
        "name": "",
        "func": "\nvar sensor1={sensor:\"sensor1\",temp:21,humidity:60};\nvar sensor2={sensor:\"sensor2\",temp:27,humidity:67};\nvar sensor3={sensor:\"sensor3\",temp:30,humidity:69};\nvar array=[sensor1,sensor2,sensor3];\nmsg.payload=array;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 1620,
        "wires": [
            [
                "f80bd344.c98c8"
            ]
        ]
    },
    {
        "id": "f80bd344.c98c8",
        "type": "template",
        "z": "7e9da581.12d884",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<h1>Example 1</h1>\n<table  class=\"table\">\n  <tr>\n  <th>Sensor</th>\n   <th>Temperature</th>\n    <th>Humidity</th>\n  \n  </tr>\n  {{#payload}}\n\n   <tr>\n    <td>{{sensor}}</td>\n    <td>{{temp}}</td> \n    <td>{{humidity}}</td>\n\n  </tr>\n\n{{/payload}}\n\n  \n</table>",
        "output": "str",
        "x": 560,
        "y": 1720,
        "wires": [
            [
                "8f56ead9.ed15b",
                "e3e9d95b.b0389"
            ]
        ]
    },
    {
        "id": "e3e9d95b.b0389",
        "type": "debug",
        "z": "7e9da581.12d884",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 740,
        "y": 1740,
        "wires": []
    },
    {
        "id": "8f56ead9.ed15b",
        "type": "ui_template",
        "z": "7e9da581.12d884",
        "d": true,
        "group": "2ac8e3fa.8b8584",
        "name": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "\n<style>\n\n.headline\n{\n font-size:28px; \n  font-weight: bold;\n    \n}\n\n.table\n{\n   \n    width:500px;  \n}\n.main\n{\n    height:250px;\n    width:600px;\n    //background:#ffffc6;\n//border:1px solid black;\n}\n.table th,td\n{\nborder:1px solid black;\n}\n.table th\n{\n   background: yellow;\n}\n</style>\n\n<div class=\"main\" ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 680,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "166a016e.2b8967",
        "type": "comment",
        "z": "7e9da581.12d884",
        "name": "object example 1",
        "info": "",
        "x": 270,
        "y": 1600,
        "wires": []
    },
    {
        "id": "72525e94.f838b8",
        "type": "comment",
        "z": "7e9da581.12d884",
        "d": true,
        "name": "DataBase example",
        "info": "",
        "x": 330,
        "y": 600,
        "wires": []
    },
    {
        "id": "a58377e1.602748",
        "type": "comment",
        "z": "7e9da581.12d884",
        "name": "Web Server",
        "info": "",
        "x": 350,
        "y": 220,
        "wires": []
    },
    {
        "id": "280ad0d23bdb12b7",
        "type": "http in",
        "z": "7e9da581.12d884",
        "name": "",
        "url": "/hello",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 880,
        "y": 260,
        "wires": [
            [
                "6371509302937430"
            ]
        ]
    },
    {
        "id": "6371509302937430",
        "type": "template",
        "z": "7e9da581.12d884",
        "d": true,
        "name": "page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<h1>Hello World</h1>",
        "x": 1060,
        "y": 260,
        "wires": [
            [
                "9c853e5bf64e61b0"
            ]
        ]
    },
    {
        "id": "9c853e5bf64e61b0",
        "type": "http response",
        "z": "7e9da581.12d884",
        "name": "",
        "x": 1220,
        "y": 260,
        "wires": []
    },
    {
        "id": "71ab01168bae9089",
        "type": "comment",
        "z": "7e9da581.12d884",
        "name": "Web Server",
        "info": "",
        "x": 1000,
        "y": 300,
        "wires": []
    },
    {
        "id": "58b1060ccba4563d",
        "type": "mqtt in",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "",
        "topic": "test_data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "178a50aa1245cf00",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 80,
        "y": 140,
        "wires": [
            [
                "0c64c551e04b70ad",
                "724b4f8504180178",
                "6c86c15ff262fe09",
                "b9e03a8b38f10bb0"
            ]
        ]
    },
    {
        "id": "0c64c551e04b70ad",
        "type": "json",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 230,
        "y": 140,
        "wires": [
            [
                "527c352cbefac2e2",
                "272650ac5bdff7a0",
                "ac04e21c5ba33ad9",
                "61d2dbf5bb5791ab",
                "7831a709cb207f34",
                "a538b960c1851a6c",
                "dcb4c622b7d87222"
            ]
        ]
    },
    {
        "id": "724b4f8504180178",
        "type": "debug",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 320,
        "wires": []
    },
    {
        "id": "af571938d7bc90e2",
        "type": "ui_chart",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "",
        "group": "a5d3a21adf49b4af",
        "order": 53,
        "width": 6,
        "height": 6,
        "label": "chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "50",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 890,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "527c352cbefac2e2",
        "type": "function",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "function 14",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\n// Construct separate messages for each data point\nconst temperatureMessage = {\n  topic: \"Temperature\", // More descriptive topic name\n  payload: temperatureValue\n};\n\n// Return both messages in an array\nreturn [temperatureMessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 140,
        "wires": [
            [
                "b0ce3003d94845b2",
                "3da97c4d29f165dc"
            ]
        ]
    },
    {
        "id": "272650ac5bdff7a0",
        "type": "function",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "function 15",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\n  if (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet Humidityvalue = parseFloat(msg.payload.Humidity);\n  if (isNaN(Humidityvalue)) {\n  Humidityvalue = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst Humiditymessage = {\n  topic: \"Humidity\", // More descriptive topic name\n  payload: Humidityvalue\n};\n\n// Return both messages in an array\nreturn [Humiditymessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 180,
        "wires": [
            [
                "d016d2ce5ff8e40e"
            ]
        ]
    },
    {
        "id": "4c5f1fe320288ce7",
        "type": "ui_chart",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "",
        "group": "a5d3a21adf49b4af",
        "order": 60,
        "width": 6,
        "height": 6,
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 710,
        "y": 340,
        "wires": [
            [
                "943c2e2459deb68d"
            ]
        ]
    },
    {
        "id": "053d71f7204a0797",
        "type": "file",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "",
        "filename": "/home/cuthbert/Desktop/node-red testing folder/file2.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "setbymsg",
        "x": 790,
        "y": 380,
        "wires": [
            [
                "944ef9118aa18067"
            ]
        ]
    },
    {
        "id": "944ef9118aa18067",
        "type": "debug",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 360,
        "wires": []
    },
    {
        "id": "6c86c15ff262fe09",
        "type": "json",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 330,
        "y": 420,
        "wires": [
            [
                "8b5ccf61c7c33d5c"
            ]
        ]
    },
    {
        "id": "8b5ccf61c7c33d5c",
        "type": "csv",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": false,
        "x": 510,
        "y": 380,
        "wires": [
            [
                "053d71f7204a0797"
            ]
        ]
    },
    {
        "id": "ff79c92aea6b93cc",
        "type": "debug",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 420,
        "wires": []
    },
    {
        "id": "ac04e21c5ba33ad9",
        "type": "function",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "function 16",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet rollingAve = parseFloat(msg.payload.Ave1);\n// Handle potential errors:\nif (isNaN(rollingAve)) {\n  rollingAve = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveMessage = {\n  topic: \"Average\", // More descriptive topic name\n  payload: rollingAve\n};\n\n// Return both messages in an array\nreturn [aveMessage];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 220,
        "wires": [
            [
                "7e6916e216c8da81"
            ]
        ]
    },
    {
        "id": "88c8e7e61e93bdd3",
        "type": "ui_gauge",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "Ave1",
        "group": "a5d3a21adf49b4af",
        "order": 17,
        "width": 5,
        "height": 4,
        "gtype": "gage",
        "title": "Rolling Average of previous 120 data points",
        "label": "units",
        "format": "{{value}}",
        "min": "30",
        "max": "50",
        "colors": [
            "#ffc800",
            "#00e626",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 830,
        "y": 180,
        "wires": []
    },
    {
        "id": "61d2dbf5bb5791ab",
        "type": "function",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "function 17",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\nlet Ave1 = parseFloat(msg.payload.Ave1);\nif (isNaN(Ave1)) {\n  Ave1 = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveWeek = parseFloat(msg.payload.AveWeek);\n// Handle potential errors:\nif (isNaN(AveWeek)) {\n  AveWeek = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveMessage = {\n  topic: \"Average\", // More descriptive topic name\n  payload: AveWeek\n};\n\n// Return both messages in an array\nreturn [aveMessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 260,
        "wires": [
            [
                "7e6916e216c8da81"
            ]
        ]
    },
    {
        "id": "7831a709cb207f34",
        "type": "function",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "function 18",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet DO = parseFloat(msg.payload.DO);\nif (isNaN(DO)) {\n  DO = 0; // Or handle the error differently\n}\n\nlet Ave1 = parseFloat(msg.payload.Ave1);\nif (isNaN(Ave1)) {\n  Ave1 = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveWeek = parseFloat(msg.payload.AveWeek);\n// Handle potential errors:\nif (isNaN(AveWeek)) {\n  AveWeek = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveMonth = parseFloat(msg.payload.AveMonth);\n// Handle potential errors:\nif (isNaN(AveMonth)) {\n  AveMonth = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveMessage = {\n  topic: \"Average\", // More descriptive topic name\n  payload: AveMonth\n};\n\n// Return both messages in an array\nreturn [aveMessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 300,
        "wires": [
            [
                "7e6916e216c8da81"
            ]
        ]
    },
    {
        "id": "213da20396a2a4fc",
        "type": "ui_gauge",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "Last Weeks Average",
        "group": "a5d3a21adf49b4af",
        "order": 2,
        "width": 5,
        "height": 4,
        "gtype": "gage",
        "title": "Rolling Average of the previous 840 data points",
        "label": "units",
        "format": "{{value}}",
        "min": "30",
        "max": "50",
        "colors": [
            "#ffdd00",
            "#00ff2a",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 860,
        "y": 220,
        "wires": []
    },
    {
        "id": "cc25b08a74335185",
        "type": "ui_gauge",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "Average of Last Month",
        "group": "a5d3a21adf49b4af",
        "order": 3,
        "width": 5,
        "height": 4,
        "gtype": "gage",
        "title": "Rolling average of 3360 data points",
        "label": "units",
        "format": "{{value}}",
        "min": "30",
        "max": "50",
        "colors": [
            "#f9aa01",
            "#00ff04",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 860,
        "y": 260,
        "wires": []
    },
    {
        "id": "943c2e2459deb68d",
        "type": "debug",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "debug 23",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 340,
        "wires": []
    },
    {
        "id": "a8995b1b0a4e5c99",
        "type": "debug",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 400,
        "wires": []
    },
    {
        "id": "b0ce3003d94845b2",
        "type": "function",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "function 19",
        "func": "let temp = parseFloat(msg.payload.temperaturemessage);\n\nclass Deque {\n    constructor() {\n      this.items = [];\n    }\n  \n    // Add element to the front of the deque\n    addFront(element) {\n      this.items.unshift(element);\n    }\n  \n    // Add element to the back of the deque\n    addRear(element) {\n      this.items.push(element);\n    }\n  \n    // Remove and return the element from the front of the deque\n    removeFront() {\n      if (this.isEmpty()) {\n        return \"Underflow\";\n      }\n      return this.items.shift();\n    }\n  \n    // Remove and return the element from the back of the deque\n    removeRear() {\n      if (this.isEmpty()) {\n        return \"Underflow\";\n      }\n      return this.items.pop();\n    }\n  \n    // Check if the deque is empty\n    isEmpty() {\n      return this.items.length === 0;\n    }\n  \n    // Return the size of the deque\n    size() {\n      return this.items.length;\n    }\n\n}\n// Create a new instance of Deque\n\nconst deque = new Deque();\n\nif \n    addRear(deque) {\n      this.temp.push(deque);\n    }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 80,
        "wires": [
            [
                "89c823d57c756feb"
            ]
        ]
    },
    {
        "id": "89c823d57c756feb",
        "type": "ui_gauge",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "Ave1",
        "group": "a5d3a21adf49b4af",
        "order": 1,
        "width": 5,
        "height": 4,
        "gtype": "gage",
        "title": "Rolling Average of previous 120 data points",
        "label": "units",
        "format": "{{value}}",
        "min": "30",
        "max": "40",
        "colors": [
            "#ffc800",
            "#00e626",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 830,
        "y": 80,
        "wires": []
    },
    {
        "id": "b9e03a8b38f10bb0",
        "type": "debug",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 40,
        "wires": []
    },
    {
        "id": "a538b960c1851a6c",
        "type": "debug",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 40,
        "wires": []
    },
    {
        "id": "3da97c4d29f165dc",
        "type": "ui_switch",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "",
        "label": "switch",
        "tooltip": "",
        "group": "2fc1ce28a58b1ce7",
        "order": 15,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 650,
        "y": 140,
        "wires": [
            [
                "af571938d7bc90e2"
            ]
        ]
    },
    {
        "id": "d016d2ce5ff8e40e",
        "type": "ui_switch",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "",
        "label": "switch",
        "tooltip": "",
        "group": "2fc1ce28a58b1ce7",
        "order": 16,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 650,
        "y": 180,
        "wires": [
            [
                "af571938d7bc90e2"
            ]
        ]
    },
    {
        "id": "7e6916e216c8da81",
        "type": "ui_dropdown",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "2fc1ce28a58b1ce7",
        "order": 17,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Day",
                "value": null,
                "type": "num"
            },
            {
                "label": "Week",
                "value": null,
                "type": "num"
            },
            {
                "label": "Month",
                "value": null,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 660,
        "y": 240,
        "wires": [
            [
                "88c8e7e61e93bdd3",
                "213da20396a2a4fc",
                "cc25b08a74335185"
            ]
        ]
    },
    {
        "id": "dcb4c622b7d87222",
        "type": "function",
        "z": "eae036f7ed9aa487",
        "g": "a403ed1d19aa681d",
        "name": "function 22",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n    temperatureValue = 0; // Or handle the error differently\n}\n\nlet Pressure = parseFloat(msg.payload.Pressure);\nif (isNaN(Pressure)) {\n    Pressure = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst pressuremessage = {\n    topic: \"Pressure\", // More descriptive topic name\n    payload: Pressure\n};\n\n// Return both messages in an array\nreturn [pressuremessage];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 340,
        "wires": [
            [
                "4c5f1fe320288ce7"
            ]
        ]
    },
    {
        "id": "507641ca572bc439",
        "type": "ui_worldmap",
        "z": "eae036f7ed9aa487",
        "group": "a5d3a21adf49b4af",
        "order": 6,
        "width": 5,
        "height": 5,
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "UKOS",
        "cluster": "",
        "maxage": "",
        "usermenu": "hide",
        "layers": "hide",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN",
        "maplist": "UKOS,OpTop",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 380,
        "y": 500,
        "wires": []
    },
    {
        "id": "1a20b2d9b57664a7",
        "type": "inject",
        "z": "eae036f7ed9aa487",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"name\":\"My Marker\",\"lat\":53.3303,\"lon\":-1.65398}",
        "payloadType": "json",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "507641ca572bc439"
            ]
        ]
    },
    {
        "id": "e9e4eaaa.3cff68",
        "type": "inject",
        "z": "d49472cb.6086a",
        "d": true,
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "35d17b1b.5ad0e4"
            ]
        ]
    },
    {
        "id": "517d9cd8.c8b6d4",
        "type": "file",
        "z": "d49472cb.6086a",
        "d": true,
        "name": "",
        "filename": "/data/create_env.sh",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 460,
        "y": 100,
        "wires": [
            [
                "ef653223.cba51"
            ]
        ]
    },
    {
        "id": "35d17b1b.5ad0e4",
        "type": "template",
        "z": "d49472cb.6086a",
        "d": true,
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "plain",
        "template": "#!/bin/bash \n\ncd /data\nls -l\npython3 -m venv envtest\nsource envtest/bin/activate\nls -l\nwhich python",
        "output": "str",
        "x": 260,
        "y": 100,
        "wires": [
            [
                "517d9cd8.c8b6d4"
            ]
        ]
    },
    {
        "id": "aee59794.e39e78",
        "type": "inject",
        "z": "d49472cb.6086a",
        "d": true,
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "1e438f0b.d018d1"
            ]
        ]
    },
    {
        "id": "1e438f0b.d018d1",
        "type": "exec",
        "z": "d49472cb.6086a",
        "d": true,
        "command": "chmod u+x /data/create_env.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "make create_env.sh file executable",
        "x": 340,
        "y": 200,
        "wires": [
            [
                "60e4efa1.2479e"
            ],
            [
                "60e4efa1.2479e"
            ],
            [
                "60e4efa1.2479e"
            ]
        ]
    },
    {
        "id": "60e4efa1.2479e",
        "type": "debug",
        "z": "d49472cb.6086a",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 200,
        "wires": []
    },
    {
        "id": "e44ebb35.ef7ae8",
        "type": "comment",
        "z": "d49472cb.6086a",
        "d": true,
        "name": "create bash file that creates and activates venv",
        "info": "In the template node we create a bash file that will create a virtual python environment and activate the environment.\n\n#!/bin/bash \n\ncd /data\nls -l\npython3 -m venv envtest\nsource envtest/bin/activate\nls -l\nwhich python",
        "x": 320,
        "y": 60,
        "wires": []
    },
    {
        "id": "bdab3472.4499d8",
        "type": "comment",
        "z": "d49472cb.6086a",
        "d": true,
        "name": "make the bash file executable",
        "info": "",
        "x": 260,
        "y": 140,
        "wires": []
    },
    {
        "id": "b11065d2.3a7c28",
        "type": "inject",
        "z": "d49472cb.6086a",
        "d": true,
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 320,
        "wires": [
            [
                "98074b29.e032a8"
            ]
        ]
    },
    {
        "id": "98074b29.e032a8",
        "type": "exec",
        "z": "d49472cb.6086a",
        "d": true,
        "command": "bash /data/create_env.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "oldrc": false,
        "name": "execute create_env.sh",
        "x": 300,
        "y": 320,
        "wires": [
            [
                "48911cc3.c3bc04"
            ],
            [
                "48911cc3.c3bc04"
            ],
            [
                "48911cc3.c3bc04"
            ]
        ]
    },
    {
        "id": "48911cc3.c3bc04",
        "type": "debug",
        "z": "d49472cb.6086a",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 610,
        "y": 320,
        "wires": []
    },
    {
        "id": "9a42ca96.0fa778",
        "type": "comment",
        "z": "d49472cb.6086a",
        "d": true,
        "name": "execute the bash file",
        "info": "",
        "x": 250,
        "y": 260,
        "wires": []
    },
    {
        "id": "ef653223.cba51",
        "type": "debug",
        "z": "d49472cb.6086a",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 670,
        "y": 100,
        "wires": []
    },
    {
        "id": "1bb0531823d52407",
        "type": "debug",
        "z": "d49472cb.6086a",
        "d": true,
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 460,
        "wires": []
    },
    {
        "id": "e512ab2fcc9f9eb8",
        "type": "mqtt in",
        "z": "bc27ebb3355b6132",
        "name": "test_data",
        "topic": "test_data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "e0fdefaa9f27b1df",
        "nl": false,
        "rap": false,
        "rh": "0",
        "inputs": 0,
        "x": 60,
        "y": 280,
        "wires": [
            [
                "61c6b568b2a54406",
                "181c1021061ae7a9",
                "215294df0ae6612f",
                "840c0c9d0d9e3d2d"
            ]
        ]
    },
    {
        "id": "61c6b568b2a54406",
        "type": "json",
        "z": "bc27ebb3355b6132",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 230,
        "y": 180,
        "wires": [
            [
                "00feabd2aa4c6daf",
                "1b950c87c43de889",
                "932c506a8d605a71",
                "f63115a4ec8876af",
                "86d85c6908169bc4",
                "ec5c83c31a26be15"
            ]
        ]
    },
    {
        "id": "840c0c9d0d9e3d2d",
        "type": "debug",
        "z": "bc27ebb3355b6132",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 20,
        "wires": []
    },
    {
        "id": "00feabd2aa4c6daf",
        "type": "function",
        "z": "bc27ebb3355b6132",
        "name": "function 8",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\n// Construct separate messages for each data point\nconst temperatureMessage = {\n  topic: \"Temperature\", // More descriptive topic name\n  payload: temperatureValue\n};\n\n// Return both messages in an array\nreturn [temperatureMessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "3a4d2e9c5c6d5201"
            ]
        ]
    },
    {
        "id": "1b950c87c43de889",
        "type": "function",
        "z": "bc27ebb3355b6132",
        "name": "function 9",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\n  if (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet Humidityvalue = parseFloat(msg.payload.Humidity);\n  if (isNaN(Humidityvalue)) {\n  Humidityvalue = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst Humiditymessage = {\n  topic: \"Humidity\", // More descriptive topic name\n  payload: Humidityvalue\n};\n\n// Return both messages in an array\nreturn [Humiditymessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 160,
        "wires": [
            [
                "3a4d2e9c5c6d5201"
            ]
        ]
    },
    {
        "id": "3a4d2e9c5c6d5201",
        "type": "ui_chart",
        "z": "bc27ebb3355b6132",
        "name": "",
        "group": "2fc1ce28a58b1ce7",
        "order": 4,
        "width": 8,
        "height": 6,
        "label": "Temperature/Humidity",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1100,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "336f5989538f7067",
        "type": "file",
        "z": "bc27ebb3355b6132",
        "name": "",
        "filename": "/home/cuthbert/Desktop/node-red testing folder/file2.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "setbymsg",
        "x": 1170,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "181c1021061ae7a9",
        "type": "json",
        "z": "bc27ebb3355b6132",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 230,
        "y": 320,
        "wires": [
            [
                "99861df781a9de67"
            ]
        ]
    },
    {
        "id": "99861df781a9de67",
        "type": "csv",
        "z": "bc27ebb3355b6132",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": false,
        "x": 650,
        "y": 320,
        "wires": [
            [
                "336f5989538f7067"
            ]
        ]
    },
    {
        "id": "932c506a8d605a71",
        "type": "function",
        "z": "bc27ebb3355b6132",
        "name": "function 10",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet rollingAve = parseFloat(msg.payload.Ave1);\n// Handle potential errors:\nif (isNaN(rollingAve)) {\n  rollingAve = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveMessage = {\n  topic: \"Average\", // More descriptive topic name\n  payload: rollingAve\n};\n\n// Return both messages in an array\nreturn [aveMessage];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 200,
        "wires": [
            [
                "fa7bd60a96340f7b"
            ]
        ]
    },
    {
        "id": "fa7bd60a96340f7b",
        "type": "ui_gauge",
        "z": "bc27ebb3355b6132",
        "name": "Ave1",
        "group": "2fc1ce28a58b1ce7",
        "order": 1,
        "width": 5,
        "height": 4,
        "gtype": "gage",
        "title": "Rolling Average of previous 120 data points",
        "label": "units",
        "format": "{{value}}",
        "min": "30",
        "max": "50",
        "colors": [
            "#ffc800",
            "#00e626",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1130,
        "y": 200,
        "wires": []
    },
    {
        "id": "f63115a4ec8876af",
        "type": "function",
        "z": "bc27ebb3355b6132",
        "name": "function 11",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\nlet Ave1 = parseFloat(msg.payload.Ave1);\nif (isNaN(Ave1)) {\n  Ave1 = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveWeek = parseFloat(msg.payload.AveWeek);\n// Handle potential errors:\nif (isNaN(AveWeek)) {\n  AveWeek = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveMessage = {\n  topic: \"Average\", // More descriptive topic name\n  payload: AveWeek\n};\n\n// Return both messages in an array\nreturn [aveMessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 240,
        "wires": [
            [
                "4dcd42d8d254c7ad"
            ]
        ]
    },
    {
        "id": "86d85c6908169bc4",
        "type": "function",
        "z": "bc27ebb3355b6132",
        "name": "function 12",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet DO = parseFloat(msg.payload.DO);\nif (isNaN(DO)) {\n  DO = 0; // Or handle the error differently\n}\n\nlet Ave1 = parseFloat(msg.payload.Ave1);\nif (isNaN(Ave1)) {\n  Ave1 = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveWeek = parseFloat(msg.payload.AveWeek);\n// Handle potential errors:\nif (isNaN(AveWeek)) {\n  AveWeek = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveMonth = parseFloat(msg.payload.AveMonth);\n// Handle potential errors:\nif (isNaN(AveMonth)) {\n  AveMonth = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveMessage = {\n  topic: \"Average\", // More descriptive topic name\n  payload: AveMonth\n};\n\n// Return both messages in an array\nreturn [aveMessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 280,
        "wires": [
            [
                "39ce31ba7983b212"
            ]
        ]
    },
    {
        "id": "4dcd42d8d254c7ad",
        "type": "ui_gauge",
        "z": "bc27ebb3355b6132",
        "name": "Last Weeks Average",
        "group": "2fc1ce28a58b1ce7",
        "order": 2,
        "width": 5,
        "height": 4,
        "gtype": "gage",
        "title": "Rolling Average of the previous 840 data points",
        "label": "units",
        "format": "{{value}}",
        "min": "30",
        "max": "50",
        "colors": [
            "#ffdd00",
            "#00ff2a",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1200,
        "y": 240,
        "wires": []
    },
    {
        "id": "39ce31ba7983b212",
        "type": "ui_gauge",
        "z": "bc27ebb3355b6132",
        "name": "Average of Last Month",
        "group": "2fc1ce28a58b1ce7",
        "order": 3,
        "width": 5,
        "height": 4,
        "gtype": "gage",
        "title": "Rolling average of 3360 data points",
        "label": "units",
        "format": "{{value}}",
        "min": "30",
        "max": "50",
        "colors": [
            "#f9aa01",
            "#00ff04",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1200,
        "y": 280,
        "wires": []
    },
    {
        "id": "ec5c83c31a26be15",
        "type": "function",
        "z": "bc27ebb3355b6132",
        "name": "function 23",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n    temperatureValue = 0; // Or handle the error differently\n}\n\nlet Pressure = parseFloat(msg.payload.Pressure);\nif (isNaN(Pressure)) {\n    Pressure = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst pressuremessage = {\n    topic: \"Pressure\", // More descriptive topic name\n    payload: Pressure\n};\n\n// Return both messages in an array\nreturn [pressuremessage];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            [
                "b8c85feef0384d56"
            ]
        ]
    },
    {
        "id": "dcd547b8fd8d30da",
        "type": "ui_form",
        "z": "bc27ebb3355b6132",
        "name": "Event Log",
        "label": "Event log",
        "group": "2fc1ce28a58b1ce7",
        "order": 13,
        "width": 15,
        "height": 7,
        "options": [
            {
                "label": "Name",
                "value": "Name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Email",
                "value": "Email",
                "type": "email",
                "required": true,
                "rows": null
            },
            {
                "label": "Date",
                "value": "Date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "Time",
                "value": "Time",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Event",
                "value": "Event",
                "type": "multiline",
                "required": false,
                "rows": 3
            }
        ],
        "formValue": {
            "Name": "",
            "Email": "",
            "Date": "",
            "Time": "",
            "Event": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 400,
        "y": 460,
        "wires": [
            [
                "4fe87352a3ce7e3d"
            ]
        ]
    },
    {
        "id": "4fe87352a3ce7e3d",
        "type": "csv",
        "z": "bc27ebb3355b6132",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 570,
        "y": 460,
        "wires": [
            [
                "d206519cf709c133"
            ]
        ]
    },
    {
        "id": "d206519cf709c133",
        "type": "file",
        "z": "bc27ebb3355b6132",
        "name": "",
        "filename": "/home/cuthbert/Desktop/node-red testing folder/eventlog.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 900,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "b79c9817fe82841d",
        "type": "function",
        "z": "bc27ebb3355b6132",
        "name": "function 24",
        "func": "// Retrieve the message payload\nvar payload = msg.payload;\n\n// Check if the payload is an object and has a property that starts with \"warning\"\nif (typeof payload === 'object' && payload !== null) {\n    for (var key in payload) {\n        if (payload.hasOwnProperty(key) && typeof payload[key] === 'string' && payload[key].startsWith('warning')) {\n            // Create a notification message\n            var notification = {\n                topic: \"Warning Notification\",\n                payload: \"Warning detected: \" + payload[key]\n            };\n            // Send the notification message\n            return [notification, null];\n        }\n    }\n}\n\n// If no warning is found, pass through the original message\nreturn [null, msg];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 500,
        "wires": [
            [
                "0a805873f635f814"
            ]
        ]
    },
    {
        "id": "215294df0ae6612f",
        "type": "json",
        "z": "bc27ebb3355b6132",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 210,
        "y": 500,
        "wires": [
            [
                "b79c9817fe82841d"
            ]
        ]
    },
    {
        "id": "0a805873f635f814",
        "type": "ui_toast",
        "z": "bc27ebb3355b6132",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 690,
        "y": 500,
        "wires": [
            [
                "9f157c38ceb85bc8"
            ]
        ]
    },
    {
        "id": "9f157c38ceb85bc8",
        "type": "ui_text",
        "z": "bc27ebb3355b6132",
        "group": "2fc1ce28a58b1ce7",
        "order": 14,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Latest:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 930,
        "y": 500,
        "wires": []
    },
    {
        "id": "85c0454e8291f5d9",
        "type": "ui_worldmap",
        "z": "bc27ebb3355b6132",
        "group": "2fc1ce28a58b1ce7",
        "order": 6,
        "width": 8,
        "height": 6,
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "UKOS",
        "cluster": "",
        "maxage": "",
        "usermenu": "hide",
        "layers": "hide",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN",
        "maplist": "UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 560,
        "y": 560,
        "wires": []
    },
    {
        "id": "c84bf10b4734c579",
        "type": "inject",
        "z": "bc27ebb3355b6132",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"name\":\"My Marker\",\"lat\":53.3303,\"lon\":-1.65398}",
        "payloadType": "json",
        "x": 390,
        "y": 560,
        "wires": [
            [
                "85c0454e8291f5d9"
            ]
        ]
    },
    {
        "id": "b8c85feef0384d56",
        "type": "ui_chart",
        "z": "bc27ebb3355b6132",
        "name": "Pressure",
        "group": "2fc1ce28a58b1ce7",
        "order": 5,
        "width": 7,
        "height": 6,
        "label": "Pressure",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 840,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "9c9e9b55458ba79e",
        "type": "mqtt in",
        "z": "d8033d206022253c",
        "name": "test_data",
        "topic": "test_data",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "e0fdefaa9f27b1df",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 80,
        "y": 340,
        "wires": [
            [
                "cd76b097919d5724"
            ]
        ]
    },
    {
        "id": "cd76b097919d5724",
        "type": "json",
        "z": "d8033d206022253c",
        "name": "test_data",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 280,
        "y": 340,
        "wires": [
            [
                "87bacfaa5a1491a4",
                "236d83a4ae69368d",
                "9cb9c39d12bd89d4",
                "6a74c3318808138f",
                "5b2c4657d4807928",
                "4cba5ff12fc74acd"
            ]
        ]
    },
    {
        "id": "87bacfaa5a1491a4",
        "type": "function",
        "z": "d8033d206022253c",
        "name": "temperature",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\n// Construct separate messages for each data point\nconst temperatureMessage = {\n  topic: \"Temperature\", // More descriptive topic name\n  payload: temperatureValue\n};\n\n// Return both messages in an array\nreturn [temperatureMessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 240,
        "wires": [
            [
                "6ed27d3d90f32818"
            ]
        ]
    },
    {
        "id": "236d83a4ae69368d",
        "type": "function",
        "z": "d8033d206022253c",
        "name": "humidity",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\n  if (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet Humidityvalue = parseFloat(msg.payload.Humidity);\n  if (isNaN(Humidityvalue)) {\n  Humidityvalue = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst Humiditymessage = {\n  topic: \"Humidity\", // More descriptive topic name\n  payload: Humidityvalue\n};\n\n// Return both messages in an array\nreturn [Humiditymessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 280,
        "wires": [
            [
                "4463964f31c87b4a"
            ]
        ]
    },
    {
        "id": "9cb9c39d12bd89d4",
        "type": "function",
        "z": "d8033d206022253c",
        "name": "Ave1",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet rollingAve = parseFloat(msg.payload.Ave1);\n// Handle potential errors:\nif (isNaN(rollingAve)) {\n  rollingAve = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveMessage = {\n  topic: \"Average\", // More descriptive topic name\n  payload: rollingAve\n};\n\n// Return both messages in an array\nreturn [aveMessage];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 320,
        "wires": [
            [
                "6c3bdf3a984b6bbf"
            ]
        ]
    },
    {
        "id": "6a74c3318808138f",
        "type": "function",
        "z": "d8033d206022253c",
        "name": "Ave2",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\nlet Ave1 = parseFloat(msg.payload.Ave1);\nif (isNaN(Ave1)) {\n  Ave1 = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveWeek = parseFloat(msg.payload.AveWeek);\n// Handle potential errors:\nif (isNaN(AveWeek)) {\n  AveWeek = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveWeek1 = {\n  topic: \"Average\", // More descriptive topic name\n  payload: AveWeek\n};\n\n// Return both messages in an array\nreturn [aveWeek1];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 360,
        "wires": [
            [
                "3f7a3de2e99f4207"
            ]
        ]
    },
    {
        "id": "5b2c4657d4807928",
        "type": "function",
        "z": "d8033d206022253c",
        "name": "Ave3",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet DO = parseFloat(msg.payload.DO);\nif (isNaN(DO)) {\n  DO = 0; // Or handle the error differently\n}\n\nlet Ave1 = parseFloat(msg.payload.Ave1);\nif (isNaN(Ave1)) {\n  Ave1 = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveWeek = parseFloat(msg.payload.AveWeek);\n// Handle potential errors:\nif (isNaN(AveWeek)) {\n  AveWeek = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveMonth = parseFloat(msg.payload.AveMonth);\n// Handle potential errors:\nif (isNaN(AveMonth)) {\n  AveMonth = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveMonth1 = {\n  topic: \"Average\", // More descriptive topic name\n  payload: AveMonth\n};\n\n// Return both messages in an array\nreturn [aveMonth1];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 400,
        "wires": [
            [
                "ce82a29184ff00a1"
            ]
        ]
    },
    {
        "id": "4cba5ff12fc74acd",
        "type": "function",
        "z": "d8033d206022253c",
        "name": "pressure",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n    temperatureValue = 0; // Or handle the error differently\n}\n\nlet Pressure = parseFloat(msg.payload.Pressure);\nif (isNaN(Pressure)) {\n    Pressure = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst pressuremessage = {\n    topic: \"Pressure\", // More descriptive topic name\n    payload: Pressure\n};\n\n// Return both messages in an array\nreturn [pressuremessage];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 200,
        "wires": [
            [
                "53540b4ae9686c84"
            ]
        ]
    },
    {
        "id": "6c3bdf3a984b6bbf",
        "type": "ui-gauge",
        "z": "d8033d206022253c",
        "name": "Gaugue",
        "group": "0e6cd99c91b690ee",
        "order": 0,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Rolling average",
        "units": "temperature",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "30",
                "color": "#5cd65c"
            },
            {
                "from": "40",
                "color": "#ffc800"
            },
            {
                "from": "45",
                "color": "#ea5353"
            }
        ],
        "min": "30",
        "max": "50",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 860,
        "y": 320,
        "wires": []
    },
    {
        "id": "6ed27d3d90f32818",
        "type": "ui-chart",
        "z": "d8033d206022253c",
        "group": "0e6cd99c91b690ee",
        "name": "Temperature",
        "label": "Temperature",
        "order": 9007199254740991,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "yAxisProperty": "",
        "ymin": "0",
        "ymax": "50",
        "action": "append",
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#db2929",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "4",
        "height": "4",
        "className": "",
        "x": 850,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "53540b4ae9686c84",
        "type": "ui-chart",
        "z": "d8033d206022253c",
        "group": "0e6cd99c91b690ee",
        "name": "",
        "label": "Air Pressure",
        "order": 9007199254740991,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "yAxisProperty": "",
        "ymin": "",
        "ymax": "",
        "action": "append",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "4",
        "height": "4",
        "className": "",
        "x": 850,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "4463964f31c87b4a",
        "type": "ui-chart",
        "z": "d8033d206022253c",
        "group": "0e6cd99c91b690ee",
        "name": "",
        "label": "Humidity",
        "order": 9007199254740991,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "time",
        "yAxisProperty": "",
        "ymin": "0",
        "ymax": "50",
        "action": "append",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "4",
        "height": "4",
        "className": "",
        "x": 860,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "4c219e50d291f683",
        "type": "csv",
        "z": "d8033d206022253c",
        "name": "/home/cuthbert/Desktop/node-red testing folder/eventlog2.csv",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 640,
        "y": 460,
        "wires": [
            [
                "29fdbea8ebdae7dc"
            ]
        ]
    },
    {
        "id": "2a684451adefb007",
        "type": "ui-form",
        "z": "d8033d206022253c",
        "name": "Event log",
        "group": "0e6cd99c91b690ee",
        "label": "Event log",
        "order": 0,
        "width": "4",
        "height": "5",
        "options": [
            {
                "label": "Name",
                "key": "Name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "email address",
                "key": "email",
                "type": "email",
                "required": true,
                "rows": null
            },
            {
                "label": "date",
                "key": "date",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "time",
                "key": "time",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Event",
                "key": "Event",
                "type": "multiline",
                "required": false,
                "rows": 3
            }
        ],
        "formValue": {
            "Name": "",
            "email": "",
            "date": "",
            "time": "",
            "Event": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "resetOnSubmit": true,
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 240,
        "y": 460,
        "wires": [
            [
                "4c219e50d291f683"
            ]
        ]
    },
    {
        "id": "29fdbea8ebdae7dc",
        "type": "file",
        "z": "d8033d206022253c",
        "name": "eventlog2",
        "filename": "/home/cuthbert/Desktop/node-red testing folder/eventlog2.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1000,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e9fd469a1c768431",
        "type": "file in",
        "z": "d8033d206022253c",
        "name": "eventlog2-read",
        "filename": "/home/cuthbert/Desktop/node-red testing folder/eventlog2.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 540,
        "y": 560,
        "wires": [
            [
                "7f432054219e02df"
            ]
        ]
    },
    {
        "id": "7f432054219e02df",
        "type": "csv",
        "z": "d8033d206022253c",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 710,
        "y": 560,
        "wires": [
            [
                "e862a0590f79c4ea"
            ]
        ]
    },
    {
        "id": "2610333daf014f87",
        "type": "ui-button",
        "z": "d8033d206022253c",
        "group": "0e6cd99c91b690ee",
        "name": "read event log",
        "label": "click to read the event log",
        "order": 0,
        "width": 0,
        "height": 0,
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 340,
        "y": 560,
        "wires": [
            [
                "e9fd469a1c768431"
            ]
        ]
    },
    {
        "id": "e862a0590f79c4ea",
        "type": "ui-notification",
        "z": "d8033d206022253c",
        "ui": "afc328fce936e3bf",
        "position": "top center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "10",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "raw": false,
        "className": "",
        "name": "",
        "x": 900,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "3f7a3de2e99f4207",
        "type": "ui-gauge",
        "z": "d8033d206022253c",
        "name": "",
        "group": "0e6cd99c91b690ee",
        "order": 0,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "last weeks average",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "4",
                "color": "#ffc800"
            },
            {
                "from": "7",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": 10,
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 890,
        "y": 360,
        "wires": []
    },
    {
        "id": "ce82a29184ff00a1",
        "type": "ui-gauge",
        "z": "d8033d206022253c",
        "name": "",
        "group": "0e6cd99c91b690ee",
        "order": 0,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "last months average",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "4",
                "color": "#ffc800"
            },
            {
                "from": "7",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": 10,
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 900,
        "y": 400,
        "wires": []
    },
    {
        "id": "d0b6170b92cd6064",
        "type": "uibuilder",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "31c2d342f75d0ef8",
        "name": "",
        "topic": "",
        "okToGo": false,
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "iife-blank-client",
        "extTemplate": "",
        "showfolder": false,
        "reload": true,
        "sourceFolder": "src",
        "deployedVersion": "6.1.0",
        "showMsgUib": true,
        "x": 400,
        "y": 580,
        "wires": [
            [
                "f95e69f67072596b"
            ],
            [
                "5d1231ce8247b08a"
            ]
        ],
        "info": "This example uses a minimal template with\r\nthe IIFE build of the front-end client.\r\n\r\nIt does not use any front-end framework, just\r\npure HTML, CSS and JavaScript.\r\n\r\nThe IIFE build should be included using a link\r\ntag in your HTML."
    },
    {
        "id": "d12df878ac1b5714",
        "type": "uibuilder",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "40dcfdd7e47f8573",
        "name": "",
        "topic": "",
        "okToGo": false,
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "esm-blank-client",
        "extTemplate": "",
        "showfolder": false,
        "reload": true,
        "sourceFolder": "src",
        "deployedVersion": "6.1.0",
        "showMsgUib": true,
        "x": 410,
        "y": 880,
        "wires": [
            [
                "863c33dc4dab0216"
            ],
            [
                "6e760e4d72cb74a7"
            ]
        ],
        "info": "This example uses a blank template with\r\nthe ESM build of the front-end client.\r\n\r\nIt does not use any front-end framework, just\r\npure HTML, CSS and JavaScript.\r\n\r\nThe ESM build should be included using an\r\n`import` statement in your `index.js` file.\r\n\r\nESM = ECMA Script Module."
    },
    {
        "id": "01f14b086d7f8a11",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "Send a msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "A Message From Node-RED",
        "payload": "This is <b>HTML</b> from Node-RED",
        "payloadType": "str",
        "x": 85,
        "y": 220,
        "wires": [
            [
                "9eb1553c08864316"
            ]
        ],
        "l": false
    },
    {
        "id": "877b43edd7251acc",
        "type": "uibuilder",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "",
        "topic": "",
        "okToGo": false,
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "blank",
        "extTemplate": "",
        "showfolder": false,
        "reload": true,
        "sourceFolder": "src",
        "deployedVersion": "6.1.0",
        "showMsgUib": true,
        "x": 470,
        "y": 200,
        "wires": [
            [
                "17fde0242e191689"
            ],
            [
                "7eee677cb9a62723"
            ]
        ],
        "info": "This example uses the default blank template.\r\n\r\nIt does not use any front-end framework, just\r\npure HTML, CSS and JavaScript."
    },
    {
        "id": "17fde0242e191689",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "uibuilder standard output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 655,
        "y": 160,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #1 (top) which is\r\nthe standard output.\r\n\r\nHere you will see any standard msg sent from\r\nyour front-end code."
    },
    {
        "id": "7eee677cb9a62723",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "uibuilder control output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 655,
        "y": 220,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #2 (bottom) which is\r\nthe control output.\r\n\r\nHere you will see any control msg either sent\r\nby the node itself or from the front-end library.\r\n\r\nFor example the \"client disconnect\" and\r\n\"client connect\" messages. Or the \"visibility\"\r\nmessages from the client.\r\n\r\nLoop the \"client connect\", \"cache replay\" and\r\n\"cache clear\" messages back to a `uib-cache`\r\nnode before the input to uibuilder in order\r\nto control the output of the cache."
    },
    {
        "id": "d0621a8f51f507bb",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "Reload",
        "props": [
            {
                "p": "_ui",
                "v": "{\"method\":\"reload\"}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reload",
        "x": 460,
        "y": 260,
        "wires": [
            [
                "3c2b5cb8448dbb64"
            ]
        ],
        "info": "Sends a pre-formatted msg to the front-end that\r\ncauses the page to reload itself."
    },
    {
        "id": "f012975f0375b6c8",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"This is the payload from the inject node! Random number: \" & $formatInteger($random()*100, \"0\")",
        "payloadType": "jsonata",
        "x": 85,
        "y": 140,
        "wires": [
            [
                "cb80cc034da2d8f1"
            ]
        ],
        "l": false
    },
    {
        "id": "cb80cc034da2d8f1",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "Notification",
        "func": "msg = {\n  \"_uib\": {\n    // This can actually be anything, if it doesn't exist, \n    // the toast will appear in the default location\n    \"componentRef\": \"globalNotification\",\n    // Note that most if not all of these are optional\n    \"options\": {\n      // These can contain HTML - note the inclusion of the payload from the upstram msg\n      \"title\": \"This is the <i>title</i>\",\n      \"content\": `This is content <span style=\\\"color:red;\\\">in addition to</span> the payload<p>${msg.payload}</p>`,\n            \n      // Use 1 of the following 2 - click msg if no auto hide:\n      \"autoHideDelay\": 2500,\n      // \"noAutoHide\": true,\n\n      // If false or not included, msgs stack above each other.\n      \"appendToast\": true,\n\n      // See \"Recommended surfaces\" in uib-brand.css. Normally\n      // 'primary', 'secondary', 'success', 'info', 'warn', 'warning', 'failure', 'error', 'danger'\n      \"variant\": \"info\",\n    }\n  }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 140,
        "wires": [
            [
                "0368db6d7d446339"
            ]
        ],
        "info": "Overlays a message on top of your UI.\r\n\r\nThe message removes itself after a couple of seconds.\r\n\r\nYou can change the options property to change the look\r\nof the displayed message."
    },
    {
        "id": "ddb950ebb37ff3e5",
        "type": "uibuilder",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "cb13651b4e3aee58",
        "name": "",
        "topic": "",
        "okToGo": false,
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "old-blank-client",
        "extTemplate": "",
        "showfolder": false,
        "reload": true,
        "sourceFolder": "src",
        "deployedVersion": "6.1.0",
        "showMsgUib": true,
        "x": 430,
        "y": 2320,
        "wires": [
            [
                "6238dd35c69f44f6"
            ],
            [
                "c458491d5a2fb1e2"
            ]
        ]
    },
    {
        "id": "909a45a07adf4caf",
        "type": "uibuilder",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "fc8f1db4547ef664",
        "name": "",
        "topic": "",
        "okToGo": false,
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "iife-vue3-nobuild",
        "extTemplate": "",
        "showfolder": false,
        "reload": true,
        "sourceFolder": "src",
        "deployedVersion": "6.1.0",
        "showMsgUib": true,
        "x": 530,
        "y": 1960,
        "wires": [
            [
                "caf50be69279b624"
            ],
            [
                "92f0587559df7590"
            ]
        ],
        "info": "This example uses a Vue v3 simple template with\r\nthe IIFE build of the front-end client.\r\n\r\nNo build step is needed to make this work,\r\nthe Vue library is included from a CDN on the\r\nInternet.\r\n\r\n\r\n## LIMITATIONS\r\n\r\nVue and similar front-end frameworks require UI\r\ncomponents and structure to be pre-defined \r\n_before_ the DOM is created. So you cannot \r\ndynamically insert further Vue elements easily.\r\n\r\nYou can still dynamically insert HTML elements.\r\nBut they will not be responsive Vue elements."
    },
    {
        "id": "736993a690bbc167",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 85,
        "y": 180,
        "wires": [
            [
                "0df7b796d44d2e71"
            ]
        ],
        "l": false
    },
    {
        "id": "0df7b796d44d2e71",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "New Card",
        "func": "/**\n * Adds a dynamically created \"card\" to the web page\n * using uibuilder's low-code capabilities.\n * Try sending multiple times to see the counter increment.\n */\n\nlet cardCounter = context.get('cardCounter') ?? 0\n\nmsg = {\n    \"_ui\": [\n        {\n            \"method\": \"remove\",\n            \"components\": [\n                \"#mycard\"\n            ]\n        },\n        {\n            \"method\": \"add\",\n            \"parent\": \"#more\",\n            \"components\": [\n                {\n                    \"type\": \"div\",\n                    \"attributes\": {\n                        \"id\": \"mycard\",\n                        \"title\": \"This is my Card\",\n                        \"style\": \"max-width: 20rem;border:solid silver 1px;margin-bottom:1rem;\",\n                    },\n                    \"components\": [\n                        {\n                            \"type\": \"h2\",\n                            \"slot\": \"A New Card\",\n                            \"attributes\": {\n                                \"class\": \"complementary\",\n                                \"style\": \"text-align:center;margin-top:0;\"\n                            }\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Some text in a paragraph.\"\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Another paragraph. Count: \" + ++cardCounter\n                        }\n                    ]\n                }\n            ],\n        }\n    ]\n}\ncontext.set('cardCounter', cardCounter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 180,
        "wires": [
            [
                "0368db6d7d446339"
            ]
        ],
        "info": "Inserts a pure HTML \"card\" into a div called `#more`.\r\nIf that div does not exist, will add to the bottom of the HTML.\r\n\r\nFirstly attempts to remove the div so that you only ever have 1.\r\n\r\nAn example of using uibuilder's dynamic UI configuration-driven\r\nbuilding capabilities without the need for any fancy nodes or\r\nframeworks. Pure HTML. But you can still utilise the extra\r\nfeatures of your favourite framework too if you like!"
    },
    {
        "id": "d121c8e3e56c4747",
        "type": "comment",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "Chk Description in each node",
        "info": "This is the \"Blank\" template. \nIt really is blank other than an H1\nheading and the usual style & script.\n\nIt is ready to be used for anything including\nuibuilder's zero-code and low-code\ncapabilities.",
        "x": 490,
        "y": 140,
        "wires": []
    },
    {
        "id": "6c14431f469b8846",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "fc8f1db4547ef664",
        "name": "Send a msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "msg-from-nr",
        "payload": "A Message From Node-RED",
        "payloadType": "str",
        "x": 150,
        "y": 1980,
        "wires": [
            [
                "dd004a6a442ee6a8"
            ]
        ],
        "info": "Send a simply msg to the front-end.\r\n\r\nThe default front-end template code will display the msg\r\nusing HTML formatting, no coding required."
    },
    {
        "id": "e47195b8eda5d40e",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "fc8f1db4547ef664",
        "name": "Reload",
        "props": [
            {
                "p": "_ui",
                "v": "{\"method\":\"reload\"}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reload",
        "x": 130,
        "y": 2020,
        "wires": [
            [
                "3e569dd871349f93"
            ]
        ],
        "info": "Sends a pre-formatted msg to the front-end that\r\ncauses the page to reload itself."
    },
    {
        "id": "0c9f24ab06ee0405",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "fc8f1db4547ef664",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"This is the payload from the inject node! Random number: \" & $formatInteger($random()*100, \"0\")",
        "payloadType": "jsonata",
        "x": 95,
        "y": 1900,
        "wires": [
            [
                "89ae80c659089985"
            ]
        ],
        "l": false
    },
    {
        "id": "89ae80c659089985",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "fc8f1db4547ef664",
        "name": "Notification (not Vue)",
        "func": "msg = {\n  \"_uib\": {\n    // This can actually be anything, if it doesn't exist, \n    // the toast will appear in the default location\n    \"componentRef\": \"globalNotification\",\n    // Note that most if not all of these are optional\n    \"options\": {\n      // These can contain HTML - note the inclusion of the payload from the upstram msg\n      \"title\": \"This is the <i>title</i>\",\n      \"content\": `This is content <span style=\\\"color:red;\\\">in addition to</span> the payload<p>${msg.payload}</p>`,\n            \n      // Use 1 of the following 2 - click msg if no auto hide:\n      \"autoHideDelay\": 2500,\n      // \"noAutoHide\": true,\n\n      // If false or not included, msgs stack above each other.\n      \"appendToast\": true,\n\n      // See \"Recommended surfaces\" in uib-brand.css. Normally\n      // 'primary', 'secondary', 'success', 'info', 'warn', 'warning', 'failure', 'error', 'danger'\n      \"variant\": \"info\",\n    }\n  }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1900,
        "wires": [
            [
                "d48166077d1f76af"
            ]
        ],
        "info": "**NOTE:** This uses uibuilder's vanilla HTML overlay notification\r\n(as in the non-Vue examples). **It is NOT Vue responsive**.\r\n\r\n---\r\n\r\nOverlays a message on top of your UI.\r\n\r\nThe message removes itself after a couple of seconds.\r\n\r\nYou can change the options property to change the look\r\nof the displayed message."
    },
    {
        "id": "9a4f424c76119444",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "31c2d342f75d0ef8",
        "name": "Send a msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "A Message From Node-RED",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 600,
        "wires": [
            [
                "05cb4b03058fc6f8"
            ]
        ],
        "info": "Send a simply msg to the front-end.\r\n\r\nThe default front-end template code will display the msg\r\nusing HTML formatting, no coding required."
    },
    {
        "id": "2cb6722e802cf5f1",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "31c2d342f75d0ef8",
        "name": "Reload",
        "props": [
            {
                "p": "_ui",
                "v": "{\"method\":\"reload\"}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reload",
        "x": 120,
        "y": 640,
        "wires": [
            [
                "05cb4b03058fc6f8"
            ]
        ],
        "info": "Sends a pre-formatted msg to the front-end that\r\ncauses the page to reload itself."
    },
    {
        "id": "5003addd448138c2",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "31c2d342f75d0ef8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"This is the payload from the inject node! Random number: \" & $formatInteger($random()*100, \"0\")",
        "payloadType": "jsonata",
        "x": 85,
        "y": 520,
        "wires": [
            [
                "ba221f812ae3d84c"
            ]
        ],
        "l": false
    },
    {
        "id": "ba221f812ae3d84c",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "31c2d342f75d0ef8",
        "name": "Notification",
        "func": "msg = {\n  \"_uib\": {\n    // This can actually be anything, if it doesn't exist, \n    // the toast will appear in the default location\n    \"componentRef\": \"globalNotification\",\n    // Note that most if not all of these are optional\n    \"options\": {\n      // These can contain HTML - note the inclusion of the payload from the upstram msg\n      \"title\": \"This is the <i>title</i>\",\n      \"content\": `This is content <span style=\\\"color:red;\\\">in addition to</span> the payload<p>${msg.payload}</p>`,\n            \n      // Use 1 of the following 2 - click msg if no auto hide:\n      \"autoHideDelay\": 2500,\n      // \"noAutoHide\": true,\n\n      // If false or not included, msgs stack above each other.\n      \"appendToast\": true,\n\n      // See \"Recommended surfaces\" in uib-brand.css. Normally\n      // 'primary', 'secondary', 'success', 'info', 'warn', 'warning', 'failure', 'error', 'danger'\n      \"variant\": \"info\",\n    }\n  }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 520,
        "wires": [
            [
                "05cb4b03058fc6f8"
            ]
        ],
        "info": "Overlays a message on top of your UI.\r\n\r\nThe message removes itself after a couple of seconds.\r\n\r\nYou can change the options property to change the look\r\nof the displayed message."
    },
    {
        "id": "4020b64008bfdad5",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "31c2d342f75d0ef8",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 85,
        "y": 560,
        "wires": [
            [
                "be06a0df26c00462"
            ]
        ],
        "l": false
    },
    {
        "id": "be06a0df26c00462",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "31c2d342f75d0ef8",
        "name": "New Card",
        "func": "let cardCounter = context.get('cardCounter') ?? 0\n\nmsg = {\n    \"_ui\": [\n        {\n            \"method\": \"remove\",\n            \"components\": [\n                \"#mycard\"\n            ]\n        },\n        {\n            \"method\": \"add\",\n            \"parent\": \"#more\",\n            \"components\": [\n                {\n                    \"type\": \"div\",\n                    \"attributes\": {\n                        \"id\": \"mycard\",\n                        \"title\": \"This is my Card\",\n                        \"style\": \"max-width: 20rem;border:solid silver 1px;margin-bottom:1rem;\",\n                    },\n                    \"components\": [\n                        {\n                            \"type\": \"h2\",\n                            \"slot\": \"A New Card\",\n                            \"attributes\": {\n                                \"class\": \"complementary\",\n                                \"style\": \"text-align:center;margin-top:0;\"\n                            }\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Some text in a paragraph.\"\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Another paragraph. Count: \" + ++cardCounter\n                        }\n                    ]\n                }\n            ],\n        }\n    ]\n}\ncontext.set('cardCounter', cardCounter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 560,
        "wires": [
            [
                "05cb4b03058fc6f8"
            ]
        ],
        "info": "Inserts a pure HTML \"card\" into a div called `#more`.\r\nIf that div does not exist, will add to the bottom of the HTML.\r\n\r\nFirstly attempts to remove the div so that you only ever have 1.\r\n\r\nAn example of using uibuilder's dynamic UI configuration-driven\r\nbuilding capabilities without the need for any fancy nodes or\r\nframeworks. Pure HTML. But you can still utilise the extra\r\nfeatures of your favourite framework too if you like!"
    },
    {
        "id": "ca085978f7a1d622",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "cb13651b4e3aee58",
        "name": "Send a msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "A Message From Node-RED",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 2340,
        "wires": [
            [
                "e03509eff4a1c892"
            ]
        ],
        "info": "Send a simply msg to the front-end.\r\n\r\nThe default front-end template code will display the msg\r\nusing HTML formatting, no coding required."
    },
    {
        "id": "7b2410170a094534",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "cb13651b4e3aee58",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"This is the payload from the inject node! Random number: \" & $formatInteger($random()*100, \"0\")",
        "payloadType": "jsonata",
        "x": 95,
        "y": 2300,
        "wires": [
            [
                "cfd5eba13fe03d51"
            ]
        ],
        "l": false
    },
    {
        "id": "cfd5eba13fe03d51",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "cb13651b4e3aee58",
        "name": "Notification",
        "func": "msg = {\n  \"_uib\": {\n    // This can actually be anything, if it doesn't exist, \n    // the toast will appear in the default location\n    \"componentRef\": \"globalNotification\",\n    // Note that most if not all of these are optional\n    \"options\": {\n      // These can contain HTML - note the inclusion of the payload from the upstram msg\n      \"title\": \"This is the <i>title</i>\",\n      \"content\": `This is content <span style=\\\"color:red;\\\">in addition to</span> the payload<p>${msg.payload}</p>`,\n            \n      // Use 1 of the following 2 - click msg if no auto hide:\n      \"autoHideDelay\": 2500,\n      // \"noAutoHide\": true,\n\n      // If false or not included, msgs stack above each other.\n      \"appendToast\": true,\n\n      // See \"Recommended surfaces\" in uib-brand.css. Normally\n      // 'primary', 'secondary', 'success', 'info', 'warn', 'warning', 'failure', 'error', 'danger'\n      \"variant\": \"info\",\n    }\n  }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 2300,
        "wires": [
            [
                "e03509eff4a1c892"
            ]
        ],
        "info": "Overlays a message on top of your UI.\r\n\r\nThe message removes itself after a couple of seconds.\r\n\r\nYou can change the options property to change the look\r\nof the displayed message."
    },
    {
        "id": "b921d7d1a7e06035",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "40dcfdd7e47f8573",
        "name": "Send a msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "A Message From Node-RED",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 900,
        "wires": [
            [
                "ca0007816b9f4419"
            ]
        ],
        "info": "Send a simply msg to the front-end.\r\n\r\nThe default front-end template code will display the msg\r\nusing HTML formatting, no coding required."
    },
    {
        "id": "8ca1a701441a31fa",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "40dcfdd7e47f8573",
        "name": "Reload",
        "props": [
            {
                "p": "_ui",
                "v": "{\"method\":\"reload\"}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reload",
        "x": 130,
        "y": 940,
        "wires": [
            [
                "ca0007816b9f4419"
            ]
        ],
        "info": "Sends a pre-formatted msg to the front-end that\r\ncauses the page to reload itself."
    },
    {
        "id": "598ecb0adfa8fc5a",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "40dcfdd7e47f8573",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"This is the payload from the inject node! Random number: \" & $formatInteger($random()*100, \"0\")",
        "payloadType": "jsonata",
        "x": 95,
        "y": 820,
        "wires": [
            [
                "599391803941e233"
            ]
        ],
        "l": false
    },
    {
        "id": "599391803941e233",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "40dcfdd7e47f8573",
        "name": "Notification",
        "func": "msg = {\n  \"_uib\": {\n    // This can actually be anything, if it doesn't exist, \n    // the toast will appear in the default location\n    \"componentRef\": \"globalNotification\",\n    // Note that most if not all of these are optional\n    \"options\": {\n      // These can contain HTML - note the inclusion of the payload from the upstram msg\n      \"title\": \"This is the <i>title</i>\",\n      \"content\": `This is content <span style=\\\"color:red;\\\">in addition to</span> the payload<p>${msg.payload}</p>`,\n            \n      // Use 1 of the following 2 - click msg if no auto hide:\n      \"autoHideDelay\": 2500,\n      // \"noAutoHide\": true,\n\n      // If false or not included, msgs stack above each other.\n      \"appendToast\": true,\n\n      // See \"Recommended surfaces\" in uib-brand.css. Normally\n      // 'primary', 'secondary', 'success', 'info', 'warn', 'warning', 'failure', 'error', 'danger'\n      \"variant\": \"info\",\n    }\n  }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 820,
        "wires": [
            [
                "ca0007816b9f4419"
            ]
        ],
        "info": "Overlays a message on top of your UI.\r\n\r\nThe message removes itself after a couple of seconds.\r\n\r\nYou can change the options property to change the look\r\nof the displayed message."
    },
    {
        "id": "958c94c7f03a6624",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "40dcfdd7e47f8573",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 95,
        "y": 860,
        "wires": [
            [
                "5a3c5e4b8751fea2"
            ]
        ],
        "l": false
    },
    {
        "id": "5a3c5e4b8751fea2",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "40dcfdd7e47f8573",
        "name": "New Card",
        "func": "let cardCounter = context.get('cardCounter') ?? 0\n\nmsg = {\n    \"_ui\": [\n        {\n            \"method\": \"remove\",\n            \"components\": [\n                \"#mycard\"\n            ]\n        },\n        {\n            \"method\": \"add\",\n            \"parent\": \"#more\",\n            \"components\": [\n                {\n                    \"type\": \"div\",\n                    \"attributes\": {\n                        \"id\": \"mycard\",\n                        \"title\": \"This is my Card\",\n                        \"style\": \"max-width: 20rem;border:solid silver 1px;margin-bottom:1rem;\",\n                    },\n                    \"components\": [\n                        {\n                            \"type\": \"h2\",\n                            \"slot\": \"A New Card\",\n                            \"attributes\": {\n                                \"class\": \"complementary\",\n                                \"style\": \"text-align:center;margin-top:0;\"\n                            }\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Some text in a paragraph.\"\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Another paragraph. Count: \" + ++cardCounter\n                        }\n                    ]\n                }\n            ],\n        }\n    ]\n}\ncontext.set('cardCounter', cardCounter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 860,
        "wires": [
            [
                "ca0007816b9f4419"
            ]
        ],
        "info": "Inserts a pure HTML \"card\" into a div called `#more`.\r\nIf that div does not exist, will add to the bottom of the HTML.\r\n\r\nFirstly attempts to remove the div so that you only ever have 1.\r\n\r\nAn example of using uibuilder's dynamic UI configuration-driven\r\nbuilding capabilities without the need for any fancy nodes or\r\nframeworks. Pure HTML. But you can still utilise the extra\r\nfeatures of your favourite framework too if you like!"
    },
    {
        "id": "f95e69f67072596b",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "31c2d342f75d0ef8",
        "name": "uibuilder standard output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 615,
        "y": 540,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #1 (top) which is\r\nthe standard output.\r\n\r\nHere you will see any standard msg sent from\r\nyour front-end code."
    },
    {
        "id": "5d1231ce8247b08a",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "31c2d342f75d0ef8",
        "name": "uibuilder control output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 615,
        "y": 600,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #2 (bottom) which is\r\nthe control output.\r\n\r\nHere you will see any control msg either sent\r\nby the node itself or from the front-end library.\r\n\r\nFor example the \"client disconnect\" and\r\n\"client connect\" messages. Or the \"visibility\"\r\nmessages from the client.\r\n\r\nLoop the \"client connect\", \"cache replay\" and\r\n\"cache clear\" messages back to a `uib-cache`\r\nnode before the input to uibuilder in order\r\nto control the output of the cache."
    },
    {
        "id": "caf50be69279b624",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "fc8f1db4547ef664",
        "name": "uibuilder standard output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 695,
        "y": 1920,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #1 (top) which is\r\nthe standard output.\r\n\r\nHere you will see any standard msg sent from\r\nyour front-end code."
    },
    {
        "id": "92f0587559df7590",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "fc8f1db4547ef664",
        "name": "uibuilder control output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 695,
        "y": 1980,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #2 (bottom) which is\r\nthe control output.\r\n\r\nHere you will see any control msg either sent\r\nby the node itself or from the front-end library.\r\n\r\nFor example the \"client disconnect\" and\r\n\"client connect\" messages. Or the \"visibility\"\r\nmessages from the client.\r\n\r\nLoop the \"client connect\", \"cache replay\" and\r\n\"cache clear\" messages back to a `uib-cache`\r\nnode before the input to uibuilder in order\r\nto control the output of the cache."
    },
    {
        "id": "6238dd35c69f44f6",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "cb13651b4e3aee58",
        "name": "uibuilder standard output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 615,
        "y": 2300,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #1 (top) which is\r\nthe standard output.\r\n\r\nHere you will see any standard msg sent from\r\nyour front-end code."
    },
    {
        "id": "c458491d5a2fb1e2",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "cb13651b4e3aee58",
        "name": "uibuilder control output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 615,
        "y": 2360,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #2 (bottom) which is\r\nthe control output.\r\n\r\nHere you will see any control msg either sent\r\nby the node itself or from the front-end library.\r\n\r\nFor example the \"client disconnect\" and\r\n\"client connect\" messages. Or the \"visibility\"\r\nmessages from the client.\r\n\r\nLoop the \"client connect\", \"cache replay\" and\r\n\"cache clear\" messages back to a `uib-cache`\r\nnode before the input to uibuilder in order\r\nto control the output of the cache."
    },
    {
        "id": "863c33dc4dab0216",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "40dcfdd7e47f8573",
        "name": "uibuilder standard output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 615,
        "y": 860,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #1 (top) which is\r\nthe standard output.\r\n\r\nHere you will see any standard msg sent from\r\nyour front-end code."
    },
    {
        "id": "6e760e4d72cb74a7",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "40dcfdd7e47f8573",
        "name": "uibuilder control output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 616,
        "y": 920,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #2 (bottom) which is\r\nthe control output.\r\n\r\nHere you will see any control msg either sent\r\nby the node itself or from the front-end library.\r\n\r\nFor example the \"client disconnect\" and\r\n\"client connect\" messages. Or the \"visibility\"\r\nmessages from the client.\r\n\r\nLoop the \"client connect\", \"cache replay\" and\r\n\"cache clear\" messages back to a `uib-cache`\r\nnode before the input to uibuilder in order\r\nto control the output of the cache."
    },
    {
        "id": "1b7e4c189916dbec",
        "type": "comment",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "31c2d342f75d0ef8",
        "name": "Chk Description in each node",
        "info": "",
        "x": 450,
        "y": 520,
        "wires": []
    },
    {
        "id": "398b84708d487dad",
        "type": "comment",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "cb13651b4e3aee58",
        "name": "Chk Description in each node",
        "info": "",
        "x": 460,
        "y": 2280,
        "wires": []
    },
    {
        "id": "0ce0de04fb70fda9",
        "type": "comment",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "40dcfdd7e47f8573",
        "name": "Chk Description in each node",
        "info": "",
        "x": 460,
        "y": 820,
        "wires": []
    },
    {
        "id": "284121dd33dcd50b",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "name": "Send a msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "A Message From Node-RED",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1700,
        "wires": [
            [
                "1b6a3d16ed9f9995"
            ]
        ],
        "info": "Send a simply msg to the front-end.\r\n\r\nThe default front-end template code will display the msg\r\nusing HTML formatting, no coding required."
    },
    {
        "id": "4b0be73d7c1879b9",
        "type": "uibuilder",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "name": "",
        "topic": "",
        "okToGo": false,
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "vue2-bootstrap",
        "extTemplate": "",
        "showfolder": false,
        "reload": true,
        "sourceFolder": "src",
        "deployedVersion": "6.1.0",
        "showMsgUib": true,
        "x": 530,
        "y": 1680,
        "wires": [
            [
                "6f8e51db50f117dd"
            ],
            [
                "d7ce360f9e714a57"
            ]
        ],
        "info": "This example uses the VueJS v2 and \r\nbootstrap-vue template.\r\n\r\nYou must have both `Vue@2` and `bootstrap-vue`\r\nlibraries installed to use this template.\r\n\r\nThis used to be the default in some older\r\nversions of uibuilder before the native\r\nHTML versions started to mature.\r\n\r\nIt still provides a simple starting point\r\nfor anyone with minimal front-end design\r\nskills in HTML, CSS, and JavaScript. That is \r\nbecause, bootstrap-vue is a comprehensive \r\nframework complete with pre-configured look and\r\nfeel (using Bootstrap) along with plenty of \r\nhelper components that reduce the amount of \r\nHTML you have to write.\r\n\r\nThe template provides a page that looks\r\nOK with no further configuration. Simply add\r\nyour own UI code within the \r\n`<b-container id=\"app_container\">` section.\r\n\r\nThe rest of the HTML in the template shows\r\nsome basic bootstrap-vue component examples\r\nsuch as forms and buttons along with cards.\r\n\r\n* https://bootstrap-vue.org/\r\n* https://vuejs.org/\r\n* https://getbootstrap.com/\r\n\r\n## LIMITATIONS\r\n\r\nVue and similar front-end frameworks require UI\r\ncomponents and structure to be pre-defined \r\n_before_ the DOM is created. So you cannot \r\ndynamically insert further Vue elements easily.\r\n\r\nYou can still dynamically insert HTML elements.\r\nBut they will not be responsive Vue elements."
    },
    {
        "id": "6f8e51db50f117dd",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "name": "uibuilder standard output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 705,
        "y": 1640,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #1 (top) which is\r\nthe standard output.\r\n\r\nHere you will see any standard msg sent from\r\nyour front-end code."
    },
    {
        "id": "d7ce360f9e714a57",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "name": "uibuilder control output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 705,
        "y": 1700,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #2 (bottom) which is\r\nthe control output.\r\n\r\nHere you will see any control msg either sent\r\nby the node itself or from the front-end library.\r\n\r\nFor example the \"client disconnect\" and\r\n\"client connect\" messages. Or the \"visibility\"\r\nmessages from the client.\r\n\r\nLoop the \"client connect\", \"cache replay\" and\r\n\"cache clear\" messages back to a `uib-cache`\r\nnode before the input to uibuilder in order\r\nto control the output of the cache."
    },
    {
        "id": "d32229867aa7e3c6",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "name": "Reload",
        "props": [
            {
                "p": "_ui",
                "v": "{\"method\":\"reload\"}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reload",
        "x": 130,
        "y": 1740,
        "wires": [
            [
                "c1d0beb7a8dcf573"
            ]
        ],
        "info": "Sends a pre-formatted msg to the front-end that\r\ncauses the page to reload itself."
    },
    {
        "id": "688f3cc99964f88d",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"This is the payload from the inject node! Random number: \" & $formatInteger($random()*100, \"0\")",
        "payloadType": "jsonata",
        "x": 95,
        "y": 1620,
        "wires": [
            [
                "802bd5f9321628ad"
            ]
        ],
        "l": false
    },
    {
        "id": "802bd5f9321628ad",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "name": "Notification",
        "func": "msg = {\n  \"_uib\": {\n    // This can actually be anything, if it doesn't exist, \n    // the toast will appear in the default location\n    \"componentRef\": \"globalNotification\",\n    // Check out the bootstrap-vue docs for details - Note that most if not all of these are optional\n    // https://bootstrap-vue.org/docs/components/toast\n    \"options\": {\n      \"title\": \"This is the <i>title</i>\",\n\n      // This is not part of the bootstrap-vue toast options - is used as the toast content.\n      // Note the inclusion of the payload from the upstram msg\n      \"content\": `This is content <span style=\\\"color:red;\\\">in addition to</span> the payload<p>${msg.payload}</p>`,\n            \n      // Use 1 of the following 2 - click msg if no auto hide:\n      \"autoHideDelay\": 2500,\n      // \"noAutoHide\": true,\n\n      // If false or not included, msgs stack above each other.\n      \"appendToast\": true,\n\n      // See \"Recommended surfaces\" in uib-brand.css. Normally\n      // 'primary', 'secondary', 'success', 'info', 'warn', 'warning', 'failure', 'error', 'danger'\n      \"variant\": \"info\",\n    }\n  }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1620,
        "wires": [
            [
                "81bf7609272ef9af"
            ]
        ],
        "info": "**NOTE:** This uses a bootstrap-vue _toast_ notification rather\r\nthan uibuilder's vanilla HTML overlay notification (as in the\r\nnon-Vue examples). If bootstrap-vue is not loaded, it will not\r\nshow anything.\r\n\r\n---\r\n\r\nOverlays a message on top of your UI.\r\n\r\nThe message removes itself after a couple of seconds.\r\n\r\nYou can change the options property to change the look\r\nof the displayed message.\r\n\r\nNote the use of a workaround in the index.js file that lets\r\nthis work with VueJS and bootstrap-vue."
    },
    {
        "id": "955997a9e7fb3c28",
        "type": "comment",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "name": "Chk Description in each node",
        "info": "",
        "x": 520,
        "y": 1620,
        "wires": []
    },
    {
        "id": "a0976141d22bd12f",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 95,
        "y": 1660,
        "wires": [
            [
                "9a7af1b5ee3353ba"
            ]
        ],
        "l": false
    },
    {
        "id": "9a7af1b5ee3353ba",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "name": "HTML insert (not Vue)",
        "func": "let cardCounter = context.get('cardCounter') ?? 0\n\nmsg = {\n    \"_ui\": [\n        {\n            \"method\": \"remove\",\n            \"components\": [\n                \"#mycard\"\n            ]\n        },\n        {\n            \"method\": \"add\",\n            \"parent\": \"#more\",\n            \"components\": [\n                {\n                    \"type\": \"div\",\n                    \"attributes\": {\n                        \"id\": \"mycard\",\n                        \"title\": \"This is my Card\",\n                        \"style\": \"max-width: 20rem;border:solid silver 1px;margin-bottom:1rem;\",\n                    },\n                    \"components\": [\n                        {\n                            \"type\": \"h2\",\n                            \"slot\": \"A New Card\",\n                            \"attributes\": {\n                                \"class\": \"complementary\",\n                                \"style\": \"text-align:center;margin-top:0;\"\n                            }\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Some text in a paragraph.\"\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Another paragraph. Count: \" + ++cardCounter\n                        }\n                    ]\n                }\n            ],\n        }\n    ]\n}\ncontext.set('cardCounter', cardCounter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1660,
        "wires": [
            [
                "7ee9528a1b19eb12"
            ]
        ],
        "info": "**NOTE: ** This does NOT insert a bootstrap-vue card, only\r\nan HTML block element. So the result is NOT responsive to Vue.\r\nVue and similar front-end frameworks require UI components and\r\nstructure to be pre-defined _before_ the DOM is created. So you\r\ncannot dynamically insert further Vue elements.\r\n\r\n---\r\n\r\nInserts a pure HTML \"card\" into a div called `#more`.\r\nIf that div does not exist, will add to the bottom of the HTML.\r\n\r\nFirstly attempts to remove the div so that you only ever have 1.\r\n\r\nAn example of using uibuilder's dynamic UI configuration-driven\r\nbuilding capabilities without the need for any fancy nodes or\r\nframeworks. Pure HTML. But you can still utilise the extra\r\nfeatures of your favourite framework too if you like!"
    },
    {
        "id": "c3bd76ce441dc3e3",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "fc8f1db4547ef664",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 95,
        "y": 1940,
        "wires": [
            [
                "3439dbee433a88a8"
            ]
        ],
        "l": false
    },
    {
        "id": "3439dbee433a88a8",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "fc8f1db4547ef664",
        "name": "HTML insert (not Vue)",
        "func": "let cardCounter = context.get('cardCounter') ?? 0\n\nmsg = {\n    \"_ui\": [\n        {\n            \"method\": \"remove\",\n            \"components\": [\n                \"#mycard\"\n            ]\n        },\n        {\n            \"method\": \"add\",\n            \"parent\": \"#more\",\n            \"components\": [\n                {\n                    \"type\": \"div\",\n                    \"attributes\": {\n                        \"id\": \"mycard\",\n                        \"title\": \"This is my Card\",\n                        \"style\": \"max-width: 20rem;border:solid silver 1px;margin-bottom:1rem;\",\n                    },\n                    \"components\": [\n                        {\n                            \"type\": \"h2\",\n                            \"slot\": \"A New Card\",\n                            \"attributes\": {\n                                \"class\": \"complementary\",\n                                \"style\": \"text-align:center;margin-top:0;\"\n                            }\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Some text in a paragraph.\"\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Another paragraph. Count: \" + ++cardCounter\n                        }\n                    ]\n                }\n            ],\n        }\n    ]\n}\ncontext.set('cardCounter', cardCounter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1940,
        "wires": [
            [
                "d48166077d1f76af"
            ]
        ],
        "info": "**NOTE: ** This does NOT insert a bootstrap-vue card, only\r\nan HTML block element. So the result is NOT responsive to Vue.\r\nVue and similar front-end frameworks require UI components and\r\nstructure to be pre-defined _before_ the DOM is created. So you\r\ncannot dynamically insert further Vue elements.\r\n\r\n---\r\n\r\nInserts a pure HTML \"card\" into a div called `#more`.\r\nIf that div does not exist, will add to the bottom of the HTML.\r\n\r\nFirstly attempts to remove the div so that you only ever have 1.\r\n\r\nAn example of using uibuilder's dynamic UI configuration-driven\r\nbuilding capabilities without the need for any fancy nodes or\r\nframeworks. Pure HTML. But you can still utilise the extra\r\nfeatures of your favourite framework too if you like!"
    },
    {
        "id": "ce9a12ba5070f920",
        "type": "comment",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "fc8f1db4547ef664",
        "name": "Chk Description in each node",
        "info": "",
        "x": 510,
        "y": 1900,
        "wires": []
    },
    {
        "id": "251344c859a9f066",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "name": "Send a msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "A Message From Node-RED",
        "payload": "",
        "payloadType": "date",
        "x": 890,
        "y": 1700,
        "wires": [
            [
                "949ddd795829e86e"
            ]
        ],
        "info": "Send a simply msg to the front-end.\r\n\r\nThe default front-end template code will display the msg\r\nusing HTML formatting, no coding required."
    },
    {
        "id": "9df22ce79ef39e07",
        "type": "uibuilder",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "name": "",
        "topic": "",
        "okToGo": false,
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "vue2-simple",
        "extTemplate": "",
        "showfolder": false,
        "reload": true,
        "sourceFolder": "src",
        "deployedVersion": "6.1.0",
        "showMsgUib": true,
        "x": 1290,
        "y": 1680,
        "wires": [
            [
                "5028e29f49a5591f"
            ],
            [
                "2a3a787b6520cef9"
            ]
        ],
        "info": "This example uses the VueJS v2 and \r\nbootstrap-vue template.\r\n\r\nYou must have both `Vue@2` and `bootstrap-vue`\r\nlibraries installed to use this template.\r\n\r\nThis is the simplest template for Vue v2 and\r\nbootstrap-vue.\r\n\r\nIt still provides a simple starting point\r\nfor anyone with minimal front-end design\r\nskills in HTML, CSS, and JavaScript. That is \r\nbecause, bootstrap-vue is a comprehensive \r\nframework complete with pre-configured look and\r\nfeel (using Bootstrap) along with plenty of \r\nhelper components that reduce the amount of \r\nHTML you have to write.\r\n\r\nThe template provides a page that looks\r\nOK with no further configuration. Simply add\r\nyour own UI code within the \r\n`<b-container id=\"app_container\">` section.\r\n\r\nThe rest of the HTML in the template shows\r\nsome basic bootstrap-vue component examples\r\nsuch as forms and buttons along with cards.\r\n\r\n* https://bootstrap-vue.org/\r\n* https://vuejs.org/\r\n* https://getbootstrap.com/\r\n\r\n## LIMITATIONS\r\n\r\nVue and similar front-end frameworks require UI\r\ncomponents and structure to be pre-defined \r\n_before_ the DOM is created. So you cannot \r\ndynamically insert further Vue elements easily.\r\n\r\nYou can still dynamically insert HTML elements.\r\nBut they will not be responsive Vue elements."
    },
    {
        "id": "5028e29f49a5591f",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "name": "uibuilder standard output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 1445,
        "y": 1640,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #1 (top) which is\r\nthe standard output.\r\n\r\nHere you will see any standard msg sent from\r\nyour front-end code."
    },
    {
        "id": "2a3a787b6520cef9",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "name": "uibuilder control output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 1445,
        "y": 1700,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #2 (bottom) which is\r\nthe control output.\r\n\r\nHere you will see any control msg either sent\r\nby the node itself or from the front-end library.\r\n\r\nFor example the \"client disconnect\" and\r\n\"client connect\" messages. Or the \"visibility\"\r\nmessages from the client.\r\n\r\nLoop the \"client connect\", \"cache replay\" and\r\n\"cache clear\" messages back to a `uib-cache`\r\nnode before the input to uibuilder in order\r\nto control the output of the cache."
    },
    {
        "id": "5e40aeef2599e4e1",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "name": "Reload",
        "props": [
            {
                "p": "_ui",
                "v": "{\"method\":\"reload\"}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reload",
        "x": 870,
        "y": 1740,
        "wires": [
            [
                "35591e8d08b9a8dc"
            ]
        ],
        "info": "Sends a pre-formatted msg to the front-end that\r\ncauses the page to reload itself."
    },
    {
        "id": "d8c57c9cbfba6417",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"This is the payload from the inject node! Random number: \" & $formatInteger($random()*100, \"0\")",
        "payloadType": "jsonata",
        "x": 835,
        "y": 1620,
        "wires": [
            [
                "5f2a84a134a770d7"
            ]
        ],
        "l": false
    },
    {
        "id": "5f2a84a134a770d7",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "name": "Notification",
        "func": "msg = {\n  \"_uib\": {\n    // This can actually be anything, if it doesn't exist, \n    // the toast will appear in the default location\n    \"componentRef\": \"globalNotification\",\n    // Check out the bootstrap-vue docs for details - Note that most if not all of these are optional\n    // https://bootstrap-vue.org/docs/components/toast\n    \"options\": {\n      \"title\": \"This is the <i>title</i>\",\n\n      // This is not part of the bootstrap-vue toast options - is used as the toast content.\n      // Note the inclusion of the payload from the upstram msg\n      \"content\": `This is content <span style=\\\"color:red;\\\">in addition to</span> the payload<p>${msg.payload}</p>`,\n            \n      // Use 1 of the following 2 - click msg if no auto hide:\n      \"autoHideDelay\": 2500,\n      // \"noAutoHide\": true,\n\n      // If false or not included, msgs stack above each other.\n      \"appendToast\": true,\n\n      // See \"Recommended surfaces\" in uib-brand.css. Normally\n      // 'primary', 'secondary', 'success', 'info', 'warn', 'warning', 'failure', 'error', 'danger'\n      \"variant\": \"info\",\n    }\n  }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1620,
        "wires": [
            [
                "168b498f7d93b9ca"
            ]
        ],
        "info": "**NOTE:** This uses a bootstrap-vue _toast_ notification rather\r\nthan uibuilder's vanilla HTML overlay notification (as in the\r\nnon-Vue examples). If bootstrap-vue is not loaded, it will not\r\nshow anything.\r\n\r\n---\r\n\r\nOverlays a message on top of your UI.\r\n\r\nThe message removes itself after a couple of seconds.\r\n\r\nYou can change the options property to change the look\r\nof the displayed message.\r\n\r\nNote the use of a workaround in the index.js file that lets\r\nthis work with VueJS and bootstrap-vue."
    },
    {
        "id": "c90fa14f3bcd1b5a",
        "type": "comment",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "name": "Chk Description in each node",
        "info": "",
        "x": 1260,
        "y": 1620,
        "wires": []
    },
    {
        "id": "04b7fe83187b26ed",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 835,
        "y": 1660,
        "wires": [
            [
                "c8177e230bf224db"
            ]
        ],
        "l": false
    },
    {
        "id": "c8177e230bf224db",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "name": "HTML insert (not Vue)",
        "func": "let cardCounter = context.get('cardCounter') ?? 0\n\nmsg = {\n    \"_ui\": [\n        {\n            \"method\": \"remove\",\n            \"components\": [\n                \"#mycard\"\n            ]\n        },\n        {\n            \"method\": \"add\",\n            \"parent\": \"#more\",\n            \"components\": [\n                {\n                    \"type\": \"div\",\n                    \"attributes\": {\n                        \"id\": \"mycard\",\n                        \"title\": \"This is my Card\",\n                        \"style\": \"max-width: 20rem;border:solid silver 1px;margin-bottom:1rem;\",\n                    },\n                    \"components\": [\n                        {\n                            \"type\": \"h2\",\n                            \"slot\": \"A New Card\",\n                            \"attributes\": {\n                                \"class\": \"complementary\",\n                                \"style\": \"text-align:center;margin-top:0;\"\n                            }\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Some text in a paragraph.\"\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Another paragraph. Count: \" + ++cardCounter\n                        }\n                    ]\n                }\n            ],\n        }\n    ]\n}\ncontext.set('cardCounter', cardCounter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1660,
        "wires": [
            [
                "079a6828b01e3ca4"
            ]
        ],
        "info": "**NOTE: ** This does NOT insert a bootstrap-vue card, only\r\nan HTML block element. So the result is NOT responsive to Vue.\r\nVue and similar front-end frameworks require UI components and\r\nstructure to be pre-defined _before_ the DOM is created. So you\r\ncannot dynamically insert further Vue elements.\r\n\r\n---\r\n\r\nInserts a pure HTML \"card\" into a div called `#more`.\r\nIf that div does not exist, will add to the bottom of the HTML.\r\n\r\nFirstly attempts to remove the div so that you only ever have 1.\r\n\r\nAn example of using uibuilder's dynamic UI configuration-driven\r\nbuilding capabilities without the need for any fancy nodes or\r\nframeworks. Pure HTML. But you can still utilise the extra\r\nfeatures of your favourite framework too if you like!"
    },
    {
        "id": "ec93b864b4127859",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "ae89de23bbb814c1",
        "name": "Send a greeting",
        "props": [
            {
                "p": "greeting",
                "v": "Hi from Node-RED 😁🚀🎆😎",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "A Message From Node-RED",
        "x": 160,
        "y": 1260,
        "wires": [
            [
                "f0c89ce59299d66c"
            ]
        ],
        "info": "Send a simply msg to the front-end.\r\n\r\nThe default front-end template code will display the msg\r\nusing HTML formatting, no coding required."
    },
    {
        "id": "ab686ecd6ae447e3",
        "type": "uibuilder",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "ae89de23bbb814c1",
        "name": "",
        "topic": "",
        "okToGo": false,
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "svelte-basic",
        "extTemplate": "",
        "showfolder": false,
        "reload": true,
        "sourceFolder": "dist",
        "deployedVersion": "6.1.0",
        "showMsgUib": true,
        "x": 470,
        "y": 1240,
        "wires": [
            [
                "1e26ba1f939b35a4"
            ],
            [
                "a9e607e92e5e2c93"
            ]
        ],
        "info": "This example uses the default blank template.\r\n\r\nIt does not use any front-end framework, just\r\npure HTML, CSS and JavaScript."
    },
    {
        "id": "1e26ba1f939b35a4",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "ae89de23bbb814c1",
        "name": "uibuilder standard output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 625,
        "y": 1200,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #1 (top) which is\r\nthe standard output.\r\n\r\nHere you will see any standard msg sent from\r\nyour front-end code."
    },
    {
        "id": "a9e607e92e5e2c93",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "ae89de23bbb814c1",
        "name": "uibuilder control output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 625,
        "y": 1260,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #2 (bottom) which is\r\nthe control output.\r\n\r\nHere you will see any control msg either sent\r\nby the node itself or from the front-end library.\r\n\r\nFor example the \"client disconnect\" and\r\n\"client connect\" messages. Or the \"visibility\"\r\nmessages from the client.\r\n\r\nLoop the \"client connect\", \"cache replay\" and\r\n\"cache clear\" messages back to a `uib-cache`\r\nnode before the input to uibuilder in order\r\nto control the output of the cache."
    },
    {
        "id": "53f930dee4d661c0",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "ae89de23bbb814c1",
        "name": "Reload",
        "props": [
            {
                "p": "_ui",
                "v": "{\"method\":\"reload\"}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reload",
        "x": 130,
        "y": 1300,
        "wires": [
            [
                "f0c89ce59299d66c"
            ]
        ],
        "info": "Sends a pre-formatted msg to the front-end that\r\ncauses the page to reload itself."
    },
    {
        "id": "a75bacf5b8e676fb",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "ae89de23bbb814c1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"This is the payload from the inject node! Random number: \" & $formatInteger($random()*100, \"0\")",
        "payloadType": "jsonata",
        "x": 95,
        "y": 1180,
        "wires": [
            [
                "c6965c37441712a2"
            ]
        ],
        "l": false
    },
    {
        "id": "c6965c37441712a2",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "ae89de23bbb814c1",
        "name": "Notification",
        "func": "msg = {\n  \"_uib\": {\n    // This can actually be anything, if it doesn't exist, \n    // the toast will appear in the default location\n    \"componentRef\": \"globalNotification\",\n    // Note that most if not all of these are optional\n    \"options\": {\n      // These can contain HTML - note the inclusion of the payload from the upstram msg\n      \"title\": \"This is the <i>title</i>\",\n      \"content\": `This is content <span style=\\\"color:red;\\\">in addition to</span> the payload<p>${msg.payload}</p>`,\n            \n      // Use 1 of the following 2 - click msg if no auto hide:\n      // \"autoHideDelay\": 2500,\n      \"noAutoHide\": true,\n\n      // If false or not included, msgs stack above each other.\n      \"appendToast\": true,\n\n      // See \"Recommended surfaces\" in uib-brand.css. Normally\n      // 'primary', 'secondary', 'success', 'info', 'warn', 'warning', 'failure', 'error', 'danger'\n      \"variant\": \"info\",\n    }\n  }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1180,
        "wires": [
            [
                "f0c89ce59299d66c"
            ]
        ],
        "info": "Overlays a message on top of your UI.\r\n\r\nThe message removes itself after a couple of seconds.\r\n\r\nYou can change the options property to change the look\r\nof the displayed message."
    },
    {
        "id": "28cb6bf6fb33f77c",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "ae89de23bbb814c1",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 95,
        "y": 1220,
        "wires": [
            [
                "1813ac9ca8eeb177"
            ]
        ],
        "l": false
    },
    {
        "id": "1813ac9ca8eeb177",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "ae89de23bbb814c1",
        "name": "New Card",
        "func": "let cardCounter = context.get('cardCounter') ?? 0\n\nmsg = {\n    \"_ui\": [\n        {\n            \"method\": \"remove\",\n            \"components\": [\n                \"#mycard\"\n            ]\n        },\n        {\n            \"method\": \"add\",\n            \"parent\": \"#more\",\n            \"components\": [\n                {\n                    \"type\": \"div\",\n                    \"attributes\": {\n                        \"id\": \"mycard\",\n                        \"title\": \"This is my Card\",\n                        \"style\": \"max-width: 20rem;border:solid silver 1px;margin-bottom:1rem;\",\n                    },\n                    \"components\": [\n                        {\n                            \"type\": \"h2\",\n                            \"slot\": \"A New Card\",\n                            \"attributes\": {\n                                \"class\": \"complementary\",\n                                \"style\": \"text-align:center;margin-top:0;\"\n                            }\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Some text in a paragraph.\"\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Another paragraph. Count: \" + ++cardCounter\n                        }\n                    ]\n                }\n            ],\n        }\n    ]\n}\ncontext.set('cardCounter', cardCounter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1220,
        "wires": [
            [
                "f0c89ce59299d66c"
            ]
        ],
        "info": "Inserts a pure HTML \"card\" into a div called `#more`.\r\nIf that div does not exist, will add to the bottom of the HTML.\r\n\r\nFirstly attempts to remove the div so that you only ever have 1.\r\n\r\nAn example of using uibuilder's dynamic UI configuration-driven\r\nbuilding capabilities without the need for any fancy nodes or\r\nframeworks. Pure HTML. But you can still utilise the extra\r\nfeatures of your favourite framework too if you like!"
    },
    {
        "id": "85733cc425b92915",
        "type": "comment",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "ae89de23bbb814c1",
        "name": "Simple Svelte Example. Chk Description in each node. Read me too",
        "info": "This example will work once you have set and\ndeployed the URL. However, if you want to make\nany changes to the front-end code, Svelte \nrequires you to _rebuild_ the destination\noutput.\n\n## Preparing\n1. Go to the server command line and navigate\nto the folder containing this example instance.\n2. In the instance root folder, run\n`npm install`. This will install all of the\nrequired development tools.\n3. Now run `npm run dev`. This starts a live\ndevelopment server and it gives you a URL.\n**IGNORE** the URL it gives you, because you\nare using Node-RED and uibuilder, you don't\nneed it 😎. Instead, you will now find that\nyour web page will automatically reload \nwhenever you save a change.\n\n## Making changes\nMost of the changes you will make will be to\nfiles in the `src` folder. However, if you\nneed to change the global CSS or the outer\nHTML template, these are in the root of the \n`dist` folder. Do not change anything in \n`dist/build` as this is overwritten by the \nSvelte build process.\n\n## Deploying\nOnce you have finished making changes, kill\nthe dev server then run `npm run build`.\n\nThat creates the final version of the code in\nthe dist folder.\n\nRemember: You are running your live pages from\nthe `dist` folder not the `src` folder.",
        "x": 300,
        "y": 1120,
        "wires": []
    },
    {
        "id": "6eba307faa3c48e2",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "946ef719ea12bc08",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 835,
        "y": 1940,
        "wires": [
            [
                "3ff7fd7992d48c25"
            ]
        ],
        "l": false
    },
    {
        "id": "3ff7fd7992d48c25",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "946ef719ea12bc08",
        "name": "HTML insert (not Vue)",
        "func": "let cardCounter = context.get('cardCounter') ?? 0\n\nmsg = {\n    \"_ui\": [\n        {\n            \"method\": \"remove\",\n            \"components\": [\n                \"#mycard\"\n            ]\n        },\n        {\n            \"method\": \"add\",\n            \"parent\": \"#more\",\n            \"components\": [\n                {\n                    \"type\": \"div\",\n                    \"attributes\": {\n                        \"id\": \"mycard\",\n                        \"title\": \"This is my Card\",\n                        \"style\": \"max-width: 20rem;border:solid silver 1px;margin-bottom:1rem;\",\n                    },\n                    \"components\": [\n                        {\n                            \"type\": \"h2\",\n                            \"slot\": \"A New Card\",\n                            \"attributes\": {\n                                \"class\": \"complementary\",\n                                \"style\": \"text-align:center;margin-top:0;\"\n                            }\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Some text in a paragraph.\"\n                        },\n                        {\n                            \"type\": \"p\",\n                            \"slot\": \"Another paragraph. Count: \" + ++cardCounter\n                        }\n                    ]\n                }\n            ],\n        }\n    ]\n}\ncontext.set('cardCounter', cardCounter)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1940,
        "wires": [
            [
                "d66f87eca883848e"
            ]
        ],
        "info": "**NOTE: ** This does NOT insert a bootstrap-vue card, only\r\nan HTML block element. So the result is NOT responsive to Vue.\r\nVue and similar front-end frameworks require UI components and\r\nstructure to be pre-defined _before_ the DOM is created. So you\r\ncannot dynamically insert further Vue elements.\r\n\r\n---\r\n\r\nInserts a pure HTML \"card\" into a div called `#more`.\r\nIf that div does not exist, will add to the bottom of the HTML.\r\n\r\nFirstly attempts to remove the div so that you only ever have 1.\r\n\r\nAn example of using uibuilder's dynamic UI configuration-driven\r\nbuilding capabilities without the need for any fancy nodes or\r\nframeworks. Pure HTML. But you can still utilise the extra\r\nfeatures of your favourite framework too if you like!"
    },
    {
        "id": "f8f90bfd46b1f53e",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "946ef719ea12bc08",
        "name": "Send a msg",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "msg-from-nr",
        "payload": "A Message From Node-RED",
        "payloadType": "str",
        "x": 890,
        "y": 1980,
        "wires": [
            [
                "7ce2b59950e22ecb"
            ]
        ],
        "info": "Send a simply msg to the front-end.\r\n\r\nThe default front-end template code will display the msg\r\nusing HTML formatting, no coding required."
    },
    {
        "id": "e340bdc745361401",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "946ef719ea12bc08",
        "name": "Reload",
        "props": [
            {
                "p": "_ui",
                "v": "{\"method\":\"reload\"}",
                "vt": "json"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "reload",
        "x": 870,
        "y": 2020,
        "wires": [
            [
                "619d338c7eba7669"
            ]
        ],
        "info": "Sends a pre-formatted msg to the front-end that\r\ncauses the page to reload itself."
    },
    {
        "id": "fb79d887323f47c1",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "946ef719ea12bc08",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"This is the payload from the inject node! Random number: \" & $formatInteger($random()*100, \"0\")",
        "payloadType": "jsonata",
        "x": 835,
        "y": 1900,
        "wires": [
            [
                "169c10878b6640e4"
            ]
        ],
        "l": false
    },
    {
        "id": "169c10878b6640e4",
        "type": "function",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "946ef719ea12bc08",
        "name": "Notification (not Vue)",
        "func": "msg = {\n  \"_uib\": {\n    // This can actually be anything, if it doesn't exist, \n    // the toast will appear in the default location\n    \"componentRef\": \"globalNotification\",\n    // Note that most if not all of these are optional\n    \"options\": {\n      // These can contain HTML - note the inclusion of the payload from the upstram msg\n      \"title\": \"This is the <i>title</i>\",\n      \"content\": `This is content <span style=\\\"color:red;\\\">in addition to</span> the payload<p>${msg.payload}</p>`,\n            \n      // Use 1 of the following 2 - click msg if no auto hide:\n      \"autoHideDelay\": 2500,\n      // \"noAutoHide\": true,\n\n      // If false or not included, msgs stack above each other.\n      \"appendToast\": true,\n\n      // See \"Recommended surfaces\" in uib-brand.css. Normally\n      // 'primary', 'secondary', 'success', 'info', 'warn', 'warning', 'failure', 'error', 'danger'\n      \"variant\": \"info\",\n    }\n  }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1900,
        "wires": [
            [
                "d66f87eca883848e"
            ]
        ],
        "info": "**NOTE:** This uses uibuilder's vanilla HTML overlay notification\r\n(as in the non-Vue examples). **It is NOT Vue responsive**.\r\n\r\n---\r\n\r\nOverlays a message on top of your UI.\r\n\r\nThe message removes itself after a couple of seconds.\r\n\r\nYou can change the options property to change the look\r\nof the displayed message."
    },
    {
        "id": "97f0c2ea900e3055",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "946ef719ea12bc08",
        "name": "uibuilder standard output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 1435,
        "y": 1920,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #1 (top) which is\r\nthe standard output.\r\n\r\nHere you will see any standard msg sent from\r\nyour front-end code."
    },
    {
        "id": "8db08ddd2a866fb5",
        "type": "debug",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "946ef719ea12bc08",
        "name": "uibuilder control output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 1435,
        "y": 1980,
        "wires": [],
        "l": false,
        "info": "This shows the data coming out of the\r\nuibuilder node's Port #2 (bottom) which is\r\nthe control output.\r\n\r\nHere you will see any control msg either sent\r\nby the node itself or from the front-end library.\r\n\r\nFor example the \"client disconnect\" and\r\n\"client connect\" messages. Or the \"visibility\"\r\nmessages from the client.\r\n\r\nLoop the \"client connect\", \"cache replay\" and\r\n\"cache clear\" messages back to a `uib-cache`\r\nnode before the input to uibuilder in order\r\nto control the output of the cache."
    },
    {
        "id": "b9a054a3ff5f393d",
        "type": "comment",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "946ef719ea12bc08",
        "name": "Chk Description in each node",
        "info": "",
        "x": 1250,
        "y": 1900,
        "wires": []
    },
    {
        "id": "7580041a7e962524",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "43b416daeed4d5cb",
        "name": "Plain DL List (Array)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "auto-create-dl-list",
        "payload": "[[\"Entry One\",\"Description One\"],[\"Entry Two\",\"Description Two a\",\"Description Two b\",\"Description Two c\"],[\"Entry Three\",\"Description Three\"],[\"Entry Four\",\"Description Four\"]]",
        "payloadType": "json",
        "x": 210,
        "y": 1420,
        "wires": [
            [
                "d2c23f660fba67cf"
            ]
        ]
    },
    {
        "id": "d2c23f660fba67cf",
        "type": "uib-element",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "43b416daeed4d5cb",
        "name": "",
        "topic": "eltest-dl",
        "elementtype": "dl",
        "parent": "#more",
        "parentSource": "#more",
        "parentSourceType": "str",
        "elementid": "eltest-dl",
        "elementIdSourceType": "str",
        "heading": "My DL Heading (h3)",
        "headingSourceType": "str",
        "headingLevel": "h3",
        "position": "last",
        "positionSourceType": "str",
        "confData": {},
        "x": 450,
        "y": 1420,
        "wires": [
            [
                "f0c89ce59299d66c"
            ]
        ]
    },
    {
        "id": "9eb1553c08864316",
        "type": "uib-update",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "",
        "topic": "",
        "mode": "update",
        "modeSourceType": "update",
        "cssSelector": "#more",
        "cssSelectorType": "str",
        "slotSourceProp": "payload",
        "slotSourcePropType": "msg",
        "attribsSource": "{\"style\": \"border: 1px solid silver;\"}",
        "attribsSourceType": "json",
        "slotPropMarkdown": false,
        "x": 210,
        "y": 220,
        "wires": [
            [
                "0368db6d7d446339"
            ]
        ]
    },
    {
        "id": "85bc1fad31a0dae8",
        "type": "comment",
        "z": "a29cf0664c167293",
        "name": "A set of flows that show off and test each of uibuilder's built-in templates and other features",
        "info": "",
        "x": 340,
        "y": 40,
        "wires": []
    },
    {
        "id": "bc0a93a1ec21c077",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "43b416daeed4d5cb",
        "name": "Remove",
        "props": [
            {
                "p": "mode",
                "v": "remove",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 1460,
        "wires": [
            [
                "d2c23f660fba67cf"
            ]
        ]
    },
    {
        "id": "41fd7d11ae3c157d",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "Toggle Visible Msgs",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"showMsg\",\"prop\":\"body\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 300,
        "wires": [
            [
                "f12f44c1b6da7192"
            ]
        ],
        "info": "Change the \"prop\" value to a CSS Selector.\r\n\r\nThe display will appear as the last child of\r\nthat selected element.\r\n\r\ne.g. `body` or `#more`."
    },
    {
        "id": "5ac8daccaea4a291",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "Toggle Visible Status",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"showStatus\",\"prop\":\"body\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "f12f44c1b6da7192"
            ]
        ],
        "info": "Change the \"prop\" value to a CSS Selector.\r\n\r\nThe display will appear as the last child of\r\nthat selected element.\r\n\r\ne.g. `body` or `#more`."
    },
    {
        "id": "89bf36d6fc8d1d41",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "Log Lvl 5",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"set\",\"prop\":\"logLevel\",\"value\":5}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 470,
        "y": 300,
        "wires": [
            [
                "7011f3686a81d7eb"
            ]
        ]
    },
    {
        "id": "e4f674b5eb32aa05",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "Log Lvl 0",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"set\",\"prop\":\"logLevel\",\"value\":0}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 470,
        "y": 340,
        "wires": [
            [
                "7011f3686a81d7eb"
            ]
        ]
    },
    {
        "id": "7011f3686a81d7eb",
        "type": "link out",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "link out 31",
        "mode": "link",
        "links": [
            "c0abb8e9c5a1262c"
        ],
        "x": 655,
        "y": 280,
        "wires": []
    },
    {
        "id": "c0abb8e9c5a1262c",
        "type": "link in",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "link in 9",
        "links": [
            "7011f3686a81d7eb"
        ],
        "x": 235,
        "y": 260,
        "wires": [
            [
                "f12f44c1b6da7192"
            ]
        ]
    },
    {
        "id": "9cf758cd9a3eda81",
        "type": "comment",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d14e5cf8cd61d8f5",
        "name": "See \\n browser \\n console",
        "info": "",
        "x": 560,
        "y": 320,
        "wires": []
    },
    {
        "id": "71fa902dccb4cb5a",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "31c2d342f75d0ef8",
        "name": "Toggle Visible Msgs",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"showMsg\",\"prop\":\"body\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 680,
        "wires": [
            [
                "05cb4b03058fc6f8"
            ]
        ],
        "info": "Change the \"prop\" value to a CSS Selector.\r\n\r\nThe display will appear as the last child of\r\nthat selected element.\r\n\r\ne.g. `body` or `#more`."
    },
    {
        "id": "b28745cf103fce72",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "40dcfdd7e47f8573",
        "name": "Toggle Visible Msgs",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"showMsg\",\"prop\":\"body\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 980,
        "wires": [
            [
                "ca0007816b9f4419"
            ]
        ],
        "info": "Change the \"prop\" value to a CSS Selector.\r\n\r\nThe display will appear as the last child of\r\nthat selected element.\r\n\r\ne.g. `body` or `#more`."
    },
    {
        "id": "6b8fde3712999f7e",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "ae89de23bbb814c1",
        "name": "Toggle Visible Msgs",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"showMsg\",\"prop\":\"body\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1340,
        "wires": [
            [
                "f0c89ce59299d66c"
            ]
        ],
        "info": "Change the \"prop\" value to a CSS Selector.\r\n\r\nThe display will appear as the last child of\r\nthat selected element.\r\n\r\ne.g. `body` or `#more`."
    },
    {
        "id": "2a6997fca56f2de1",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "1f80e4a191d5322a",
        "name": "Toggle Visible Msgs",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"showMsg\",\"prop\":\"#app_container\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 910,
        "y": 1780,
        "wires": [
            [
                "35591e8d08b9a8dc"
            ]
        ],
        "info": "Change the \"prop\" value to a CSS Selector.\r\n\r\nThe display will appear as the last child of\r\nthat selected element.\r\n\r\ne.g. `body` or `#more`."
    },
    {
        "id": "5d26dd3c341a40b3",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "d7ec253e417f16b6",
        "name": "Toggle Visible Msgs",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"showMsg\",\"prop\":\"#app_container\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1780,
        "wires": [
            [
                "c1d0beb7a8dcf573"
            ]
        ],
        "info": "Change the \"prop\" value to a CSS Selector.\r\n\r\nThe display will appear as the last child of\r\nthat selected element.\r\n\r\ne.g. `body` or `#more`."
    },
    {
        "id": "c969ddb33e099a82",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "fc8f1db4547ef664",
        "name": "Toggle Visible Msgs",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"showMsg\",\"prop\":\"#app\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 2060,
        "wires": [
            [
                "3e569dd871349f93"
            ]
        ],
        "info": "Change the \"prop\" value to a CSS Selector.\r\n\r\nThe display will appear as the last child of\r\nthat selected element.\r\n\r\ne.g. `body` or `#more`."
    },
    {
        "id": "29bf34be48a50467",
        "type": "inject",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "946ef719ea12bc08",
        "name": "Toggle Visible Msgs",
        "props": [
            {
                "p": "_uib",
                "v": "{\"command\":\"showMsg\",\"prop\":\"#app\"}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 910,
        "y": 2060,
        "wires": [
            [
                "619d338c7eba7669"
            ]
        ],
        "info": "Change the \"prop\" value to a CSS Selector.\r\n\r\nThe display will appear as the last child of\r\nthat selected element.\r\n\r\ne.g. `body` or `#more`."
    },
    {
        "id": "31310a6648a194ce",
        "type": "uibuilder",
        "z": "a29cf0664c167293",
        "d": true,
        "g": "946ef719ea12bc08",
        "name": "",
        "topic": "",
        "okToGo": false,
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "esm-vue3-nobuild",
        "extTemplate": "",
        "showfolder": false,
        "reload": false,
        "sourceFolder": "src",
        "deployedVersion": "6.1.0-beta",
        "showMsgUib": false,
        "x": 1280,
        "y": 1960,
        "wires": [
            [
                "97f0c2ea900e3055"
            ],
            [
                "8db08ddd2a866fb5"
            ]
        ]
    }
]