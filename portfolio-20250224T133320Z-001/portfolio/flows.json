[
    {
        "id": "38240a5a23fafee4",
        "type": "tab",
        "label": "maindashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d7cb8e8311cf984f",
        "type": "mqtt in",
        "z": "38240a5a23fafee4",
        "name": "test_data",
        "topic": "test_data",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "178a50aa1245cf00",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 60,
        "y": 280,
        "wires": [
            [
                "4e60c868b2c4e276",
                "827b15d05456ff78",
                "ee54db14f7d40cc2",
                "398d19f9d9649d2c",
                "0b893f145ecc80a6",
                "069b176dd23b0419"
            ]
        ]
    },
    {
        "id": "4e60c868b2c4e276",
        "type": "json",
        "z": "38240a5a23fafee4",
        "name": "test_data",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 240,
        "y": 280,
        "wires": [
            [
                "98934c617ec031ca",
                "eb04bd32b445be58",
                "825df2569933dce7",
                "99b1eb12ef24eabb",
                "6186111f1db84628",
                "bcb4e8ce81dbb2a0"
            ]
        ]
    },
    {
        "id": "0b893f145ecc80a6",
        "type": "debug",
        "z": "38240a5a23fafee4",
        "name": "debugcb",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 40,
        "wires": []
    },
    {
        "id": "67287e4beba8ae5e",
        "type": "ui_chart",
        "z": "38240a5a23fafee4",
        "name": "temperaturechart",
        "group": "703824db.9d74a4",
        "order": 7,
        "width": 8,
        "height": 6,
        "label": "Temperature",
        "chartType": "line",
        "legend": "false",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "50",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 910,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "98934c617ec031ca",
        "type": "function",
        "z": "38240a5a23fafee4",
        "name": "function 8",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\n// Construct separate messages for each data point\nconst temperatureMessage = {\n  topic: \"Temperature\", // More descriptive topic name\n  payload: temperatureValue\n};\n\n// Return both messages in an array\nreturn [temperatureMessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 180,
        "wires": [
            [
                "67287e4beba8ae5e",
                "c973cca490dff1b9"
            ]
        ]
    },
    {
        "id": "069b176dd23b0419",
        "type": "debug",
        "z": "38240a5a23fafee4",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 40,
        "wires": []
    },
    {
        "id": "eb04bd32b445be58",
        "type": "function",
        "z": "38240a5a23fafee4",
        "name": "function 9",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\n  if (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet Humidityvalue = parseFloat(msg.payload.Humidity);\n  if (isNaN(Humidityvalue)) {\n  Humidityvalue = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst Humiditymessage = {\n  topic: \"Humidity\", // More descriptive topic name\n  payload: Humidityvalue\n};\n\n// Return both messages in an array\nreturn [Humiditymessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "3ab5c0f6871d7a58",
                "919f8d3e743fed46"
            ]
        ]
    },
    {
        "id": "919f8d3e743fed46",
        "type": "ui_chart",
        "z": "38240a5a23fafee4",
        "name": "Humidity",
        "group": "703824db.9d74a4",
        "order": 8,
        "width": 7,
        "height": 6,
        "label": "Humidity",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 220,
        "wires": [
            [
                "64b67bf5093a084b"
            ]
        ]
    },
    {
        "id": "1ebfc4ad28a3254d",
        "type": "file",
        "z": "38240a5a23fafee4",
        "name": "",
        "filename": "/home/cuthbert/Desktop/node-red testing folder/file2.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "setbymsg",
        "x": 950,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "827b15d05456ff78",
        "type": "json",
        "z": "38240a5a23fafee4",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 230,
        "y": 560,
        "wires": [
            [
                "1d68c244c5d29ab2"
            ]
        ]
    },
    {
        "id": "1d68c244c5d29ab2",
        "type": "csv",
        "z": "38240a5a23fafee4",
        "name": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": false,
        "x": 430,
        "y": 580,
        "wires": [
            [
                "1ebfc4ad28a3254d"
            ]
        ]
    },
    {
        "id": "825df2569933dce7",
        "type": "function",
        "z": "38240a5a23fafee4",
        "name": "function 10",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet rollingAve = parseFloat(msg.payload.Ave1);\n// Handle potential errors:\nif (isNaN(rollingAve)) {\n  rollingAve = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveMessage = {\n  topic: \"Average\", // More descriptive topic name\n  payload: rollingAve\n};\n\n// Return both messages in an array\nreturn [aveMessage];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 260,
        "wires": [
            [
                "1e8c99fa575e3619"
            ]
        ]
    },
    {
        "id": "1e8c99fa575e3619",
        "type": "ui_gauge",
        "z": "38240a5a23fafee4",
        "name": "Ave1",
        "group": "703824db.9d74a4",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Rolling average for the last 6 minutes.",
        "label": "units",
        "format": "{{value}}",
        "min": "40",
        "max": "45",
        "colors": [
            "#0062ff",
            "#00e626",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 890,
        "y": 260,
        "wires": []
    },
    {
        "id": "99b1eb12ef24eabb",
        "type": "function",
        "z": "38240a5a23fafee4",
        "name": "function 11",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet dissolvedOxygenValue = parseFloat(msg.payload.DO);\nif (isNaN(dissolvedOxygenValue)) {\n  dissolvedOxygenValue = 0; // Or handle the error differently\n}\n\nlet Ave1 = parseFloat(msg.payload.Ave1);\nif (isNaN(Ave1)) {\n  Ave1 = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveWeek = parseFloat(msg.payload.AveWeek);\n// Handle potential errors:\nif (isNaN(AveWeek)) {\n  AveWeek = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveMessage = {\n  topic: \"Average\", // More descriptive topic name\n  payload: AveWeek\n};\n\n// Return both messages in an array\nreturn [aveMessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 300,
        "wires": [
            [
                "d8f6617ce5cc0b17"
            ]
        ]
    },
    {
        "id": "6186111f1db84628",
        "type": "function",
        "z": "38240a5a23fafee4",
        "name": "function 12",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n  temperatureValue = 0; // Or handle the error differently\n}\n\nlet DO = parseFloat(msg.payload.DO);\nif (isNaN(DO)) {\n  DO = 0; // Or handle the error differently\n}\n\nlet Ave1 = parseFloat(msg.payload.Ave1);\nif (isNaN(Ave1)) {\n  Ave1 = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveWeek = parseFloat(msg.payload.AveWeek);\n// Handle potential errors:\nif (isNaN(AveWeek)) {\n  AveWeek = 0; // Or handle the error differently\n}\n\n// Access data directly from msg.payload (assuming it's an object)\nlet AveMonth = parseFloat(msg.payload.AveMonth);\n// Handle potential errors:\nif (isNaN(AveMonth)) {\n  AveMonth = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst aveMessage = {\n  topic: \"Average\", // More descriptive topic name\n  payload: AveMonth\n};\n\n// Return both messages in an array\nreturn [aveMessage];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 340,
        "wires": [
            [
                "c973cca490dff1b9"
            ]
        ]
    },
    {
        "id": "d8f6617ce5cc0b17",
        "type": "ui_gauge",
        "z": "38240a5a23fafee4",
        "name": "Last Weeks Average",
        "group": "703824db.9d74a4",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Rolling average of the temperature for the last 30 minutes",
        "label": "units",
        "format": "{{value}}",
        "min": "40",
        "max": "45",
        "colors": [
            "#0040ff",
            "#00ff2a",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 780,
        "y": 300,
        "wires": []
    },
    {
        "id": "c973cca490dff1b9",
        "type": "ui_gauge",
        "z": "38240a5a23fafee4",
        "name": "Average of Last Month",
        "group": "703824db.9d74a4",
        "order": 3,
        "width": 3,
        "height": 3,
        "gtype": "gage",
        "title": "Rolling average of the temperature for the last hour",
        "label": "units",
        "format": "{{value}}",
        "min": "40",
        "max": "45",
        "colors": [
            "#0109f9",
            "#00ff04",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 780,
        "y": 340,
        "wires": []
    },
    {
        "id": "2a9429dab4e4700e",
        "type": "ui_worldmap",
        "z": "38240a5a23fafee4",
        "group": "703824db.9d74a4",
        "order": 11,
        "width": 6,
        "height": 6,
        "name": "Hathersage sensor",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OpTop",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "true",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO",
        "maplist": "UKOS,OpTop",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 710,
        "y": 640,
        "wires": []
    },
    {
        "id": "3fd17778688f7392",
        "type": "inject",
        "z": "38240a5a23fafee4",
        "name": "Co ordinates for Hathersage",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"name\":\"My Marker\",\"lat\":53.3303,\"lon\":-1.65398}",
        "payloadType": "json",
        "x": 360,
        "y": 640,
        "wires": [
            [
                "2a9429dab4e4700e"
            ]
        ]
    },
    {
        "id": "3ab5c0f6871d7a58",
        "type": "debug",
        "z": "38240a5a23fafee4",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 40,
        "wires": []
    },
    {
        "id": "64b67bf5093a084b",
        "type": "debug",
        "z": "38240a5a23fafee4",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 220,
        "wires": []
    },
    {
        "id": "ee54db14f7d40cc2",
        "type": "json",
        "z": "38240a5a23fafee4",
        "d": true,
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 390,
        "y": 140,
        "wires": [
            [
                "2ecbabc8109cd63b"
            ]
        ]
    },
    {
        "id": "2ecbabc8109cd63b",
        "type": "debug",
        "z": "38240a5a23fafee4",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 140,
        "wires": []
    },
    {
        "id": "bcb4e8ce81dbb2a0",
        "type": "function",
        "z": "38240a5a23fafee4",
        "name": "function 20",
        "func": "// Access data directly from msg.payload (assuming it's an object)\nlet temperatureValue = parseFloat(msg.payload.temp);\n// Handle potential errors:\nif (isNaN(temperatureValue)) {\n    temperatureValue = 0; // Or handle the error differently\n}\n\nlet Pressure = parseFloat(msg.payload.Pressure);\nif (isNaN(Pressure)) {\n    Pressure = 0; // Or handle the error differently\n}\n\n\n// Construct separate messages for each data point\nconst pressuremessage = {\n    topic: \"Pressure\", // More descriptive topic name\n    payload: Pressure\n};\n\n// Return both messages in an array\nreturn [pressuremessage];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 400,
        "wires": [
            [
                "fc1516c7b6983a39"
            ]
        ]
    },
    {
        "id": "fc1516c7b6983a39",
        "type": "ui_chart",
        "z": "38240a5a23fafee4",
        "name": "Pressure",
        "group": "703824db.9d74a4",
        "order": 9,
        "width": 6,
        "height": 6,
        "label": "Pressure",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 880,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "11372edd376acd39",
        "type": "sqlite",
        "z": "38240a5a23fafee4",
        "d": true,
        "mydb": "6d70096c.acbce8",
        "sqlquery": "prepared",
        "sql": "",
        "name": "sensor_data.db",
        "x": 460,
        "y": 480,
        "wires": [
            [
                "ac29d091af3c97a6"
            ]
        ]
    },
    {
        "id": "ac29d091af3c97a6",
        "type": "debug",
        "z": "38240a5a23fafee4",
        "d": true,
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 480,
        "wires": []
    },
    {
        "id": "398d19f9d9649d2c",
        "type": "json",
        "z": "38240a5a23fafee4",
        "d": true,
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 270,
        "y": 480,
        "wires": [
            [
                "11372edd376acd39"
            ]
        ]
    },
    {
        "id": "178a50aa1245cf00",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "20",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "test_data",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "703824db.9d74a4",
        "type": "ui_group",
        "name": "River2",
        "tab": "a58e6387f04561da",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": true,
        "className": ""
    },
    {
        "id": "6d70096c.acbce8",
        "type": "sqlitedb",
        "db": "/home/cuthbert/Desktop/node-red testing folder/sensor_data.db",
        "mode": "RW"
    },
    {
        "id": "a58e6387f04561da",
        "type": "ui_tab",
        "name": "River",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]